{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Message, Settings, SystemMessage, Device, Text, Voice, LegacyDevice, InitialSettings } from './proto';\nimport { PacketWrapperFromServer } from './asr';\nimport { createNanoEvents } from './nanoevents';\nimport { createVoicePlayer } from './createVoicePlayer';\nexport const MESSAGE_NAMES = {\n  ANSWER_TO_USER: 'ANSWER_TO_USER',\n  STT: 'STT'\n};\nexport const appendHeader = buffer => {\n  // Добавляем 4 байта в начало с длинной сообщения\n  const arrayBuffer = new ArrayBuffer(4);\n  const dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, buffer.length, true);\n  const uint8Array = new Uint8Array(4 + buffer.length);\n  uint8Array.set(new Uint8Array(arrayBuffer));\n  uint8Array.set(buffer, 4);\n  return uint8Array;\n};\n\nconst compileBasePayload = ({\n  userId,\n  token,\n  userChannel,\n  version,\n  messageName,\n  vpsToken\n}) => {\n  if (version < 3) {\n    return {\n      userId,\n      token,\n      userChannel,\n      messageName,\n      vpsToken,\n      version\n    };\n  }\n\n  return {\n    token,\n    messageName,\n    version\n  };\n};\n\nexport const createClient = (clientParams, logger, voiceSettings) => {\n  const {\n    url,\n    userId,\n    token,\n    userChannel,\n    locale,\n    device,\n    settings,\n    legacyDevice,\n    version,\n    messageName,\n    vpsToken\n  } = clientParams;\n  const basePayload = compileBasePayload({\n    userId,\n    token,\n    messageName,\n    vpsToken,\n    userChannel,\n    version\n  });\n  let status = 'connecting';\n  const messageQueue = [];\n  const {\n    on,\n    emit,\n    once\n  } = createNanoEvents();\n  const pendingMessages = new Map();\n  const commitedMessages = new Map();\n  let currentSettings = {\n    device,\n    legacyDevice,\n    settings,\n    locale\n  };\n  let currentMessageId = Date.now();\n  let retries = 0;\n  let destroyed = false;\n  let ws;\n  let timeOut;\n  let clearRetryTimer;\n  const voicePlayer = createVoicePlayer(voiceSettings);\n\n  const getMessageId = () => {\n    return currentMessageId++;\n  };\n\n  const waitForAnswerToUser = messageId => {\n    return new Promise(resolve => {\n      const off = on('systemMessage', (systemMessageData, originalMessage) => {\n        if (originalMessage.messageId === messageId && originalMessage.messageName === MESSAGE_NAMES.ANSWER_TO_USER) {\n          off();\n          resolve(systemMessageData);\n        }\n      });\n    });\n  };\n\n  const send = _a => {\n    var {\n      payload,\n      messageId\n    } = _a,\n        other = __rest(_a, [\"payload\", \"messageId\"]);\n\n    const message = Message.create(Object.assign(Object.assign(Object.assign(Object.assign({\n      messageName: ''\n    }, basePayload), payload), {\n      messageId\n    }), other));\n    const buffer = Message.encode(message).finish();\n    const bufferWithHeader = appendHeader(buffer);\n    logger === null || logger === void 0 ? void 0 : logger.logOutcoming(message);\n    emit('outcoming', message);\n\n    if (status === 'ready') {\n      ws.send(bufferWithHeader);\n    } else {\n      messageQueue.push(bufferWithHeader);\n    }\n  };\n\n  const sendDevice = (data, last = true, messageId = getMessageId()) => {\n    currentSettings = Object.assign(Object.assign({}, currentSettings), {\n      device: data\n    });\n    return send({\n      payload: {\n        device: Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId\n    });\n  };\n\n  const sendInitialSettings = (data, last = true, messageId = getMessageId()) => {\n    if (data.device && data.settings) {\n      currentSettings = Object.assign(Object.assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n\n    return send({\n      payload: {\n        initialSettings: InitialSettings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId\n    });\n  };\n\n  const sendLegacyDevice = (data, last = true, messageId = getMessageId()) => {\n    currentSettings = Object.assign(Object.assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return send({\n      payload: {\n        legacyDevice: LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId\n    });\n  };\n\n  const sendSettings = (data, last = true, messageId = getMessageId()) => {\n    currentSettings = Object.assign(Object.assign({}, currentSettings), {\n      settings: data\n    });\n    return send({\n      payload: {\n        settings: Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId\n    });\n  };\n\n  const sendText = (data, params = {}, type = '', messageId = getMessageId()) => {\n    var _a;\n\n    const text = type ? {\n      data,\n      type\n    } : {\n      data\n    };\n    send(Object.assign({\n      payload: {\n        text: Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId\n    }, params));\n    return waitForAnswerToUser(messageId);\n  };\n\n  const createVoiceStream = (meta, messageId = getMessageId()) => {\n    let hasFinished = false;\n    const voiceStreamEM = createNanoEvents();\n\n    const write = (data, last = false) => {\n      if (!hasFinished) {\n        send({\n          payload: {\n            voice: Voice.create({\n              data: new Uint8Array(data)\n            }),\n            last: -1\n          },\n          messageId\n        });\n        hasFinished = last;\n      }\n    };\n\n    meta && send({\n      payload: {\n        systemMessage: SystemMessage.create({\n          data: JSON.stringify(meta)\n        }),\n        last: -1\n      },\n      messageId\n    });\n    on('message', message => {\n      var _a, _b;\n\n      if (message.status && message.status.code != null && message.status.code < 0) {\n        hasFinished = true;\n      }\n\n      if (message.messageId === messageId && message.messageName === MESSAGE_NAMES.STT) {\n        if (message.last === 1) {\n          hasFinished = true;\n          send({\n            payload: {\n              voice: Voice.create(),\n              last: 1\n            },\n            messageId\n          });\n        }\n\n        if (message.text) {\n          voiceStreamEM.emit('stt', message.text.data || '', message.last === 1);\n        }\n\n        if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n          const {\n            decoderResultField\n          } = PacketWrapperFromServer.decode(message.bytes.data);\n\n          if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n            voiceStreamEM.emit('stt', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal);\n          }\n        }\n      }\n    });\n    return {\n      write,\n      answerToUser: waitForAnswerToUser(messageId),\n      on: voiceStreamEM.on\n    };\n  };\n\n  const sendSystemMessage = ({\n    data,\n    messageName = ''\n  }, last = true, messageId = getMessageId()) => {\n    send({\n      payload: {\n        systemMessage: SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName,\n        last: last ? 1 : -1\n      },\n      messageId\n    });\n    return waitForAnswerToUser(messageId);\n  };\n\n  const updateDefauls = obj => {\n    Object.assign(basePayload, obj);\n  };\n\n  const destroy = () => {\n    destroyed = true;\n    ws && ws.close();\n    clearTimeout(timeOut);\n    timeOut = undefined;\n  };\n\n  const startWebSocket = () => {\n    status = 'connecting';\n    setTimeout(() => {\n      emit('connecting');\n    }, 0);\n    ws = new WebSocket(url);\n    ws.binaryType = 'arraybuffer';\n    ws.addEventListener('open', () => {\n      status = 'ready';\n      clearRetryTimer = window.setTimeout(() => {\n        retries = 0;\n      }, 500);\n\n      if (ws.readyState === 1) {\n        if (version < 3) {\n          if (version === 1 && currentSettings.legacyDevice) {\n            sendLegacyDevice(currentSettings.legacyDevice);\n          } else if (version === 2 && currentSettings.device) {\n            sendDevice(currentSettings.device);\n          }\n\n          sendSettings(currentSettings.settings);\n        } else {\n          sendInitialSettings({\n            userId,\n            userChannel,\n            device: currentSettings.device,\n            settings: currentSettings.settings,\n            locale: version > 3 ? currentSettings.locale : undefined\n          });\n        }\n\n        logger === null || logger === void 0 ? void 0 : logger.logInit(Object.assign(Object.assign({}, clientParams), currentSettings));\n\n        while (messageQueue.length > 0) {\n          const message = messageQueue.shift();\n          ws.send(message);\n        }\n      }\n\n      emit('ready');\n    });\n    ws.addEventListener('close', () => {\n      status = 'closed';\n      clearTimeout(clearRetryTimer);\n\n      if (!ws || ws.readyState === 3 && !destroyed) {\n        if (timeOut) {\n          clearTimeout(timeOut);\n        }\n\n        timeOut = window.setTimeout(() => {\n          startWebSocket();\n          retries++;\n        }, 300 * retries);\n      }\n\n      emit('close');\n    });\n    ws.addEventListener('message', e => {\n      var _a, _b, _c;\n\n      const message = Message.decode(new Uint8Array(e.data).slice(4));\n      const messages = pendingMessages.get(message.messageId) || [];\n      logger === null || logger === void 0 ? void 0 : logger.logIncoming(message);\n      messages.push(message);\n      if ((_b = (_a = message.voice) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length) voicePlayer.streamToDataToPlayer(message.voice.data);\n\n      if (message.last === 1) {\n        voicePlayer.setFinish();\n        commitedMessages.set(message.messageId, messages);\n        pendingMessages.delete(message.messageId);\n      } else {\n        pendingMessages.set(message.messageId, messages);\n      }\n\n      emit('message', message);\n\n      if ((_c = message.systemMessage) === null || _c === void 0 ? void 0 : _c.data) {\n        const systemMessage = JSON.parse(message.systemMessage.data);\n        emit('systemMessage', systemMessage, message);\n      }\n    });\n  };\n\n  startWebSocket();\n\n  const batch = cb => {\n    const batchingMessageId = getMessageId();\n    let lastMessageSent = false;\n\n    const checkLastMessageStatus = last => {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n\n    const threeParamsMethods = Object.entries({\n      sendDevice,\n      sendSettings,\n      sendInitialSettings,\n      sendLegacyDevice\n    }).reduce((acc, curr) => {\n      const key = curr[0];\n\n      acc[key] = (...params) => {\n        checkLastMessageStatus(params[1]);\n        return curr[1](params[0], params[1], batchingMessageId);\n      };\n\n      return acc;\n    }, {});\n\n    const upgradedSend = params => {\n      checkLastMessageStatus(params.payload.last === 1);\n      return send(Object.assign(Object.assign({}, params), {\n        messageId: batchingMessageId\n      }));\n    };\n\n    const upgradedSendText = (...[data, params, type]) => {\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n\n    const upgradedCreateVoiceStream = meta => {\n      const stream = createVoiceStream(meta, batchingMessageId);\n      return Object.assign(Object.assign({}, stream), {\n        write: (data, last) => {\n          checkLastMessageStatus(last);\n          return stream.write(data, last);\n        }\n      });\n    };\n\n    const upgradedSendSystemMessage = (data, last) => {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId);\n    };\n\n    return cb(Object.assign(Object.assign({}, threeParamsMethods), {\n      send: upgradedSend,\n      sendText: upgradedSendText,\n      createVoiceStream: upgradedCreateVoiceStream,\n      sendSystemMessage: upgradedSendSystemMessage\n    }));\n  };\n\n  return {\n    once,\n    send,\n    sendDevice,\n    sendLegacyDevice,\n    sendSettings,\n    sendText,\n    createVoiceStream,\n    sendSystemMessage,\n    on,\n    updateDefauls,\n    destroy,\n    batch,\n\n    get currentMessageId() {\n      return currentMessageId;\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/node_modules/@sberdevices/assistant-client/dist/client.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","Message","Settings","SystemMessage","Device","Text","Voice","LegacyDevice","InitialSettings","PacketWrapperFromServer","createNanoEvents","createVoicePlayer","MESSAGE_NAMES","ANSWER_TO_USER","STT","appendHeader","buffer","arrayBuffer","ArrayBuffer","dataView","DataView","setInt32","uint8Array","Uint8Array","set","compileBasePayload","userId","token","userChannel","version","messageName","vpsToken","createClient","clientParams","logger","voiceSettings","url","locale","device","settings","legacyDevice","basePayload","status","messageQueue","on","emit","once","pendingMessages","Map","commitedMessages","currentSettings","currentMessageId","Date","now","retries","destroyed","ws","timeOut","clearRetryTimer","voicePlayer","getMessageId","waitForAnswerToUser","messageId","Promise","resolve","off","systemMessageData","originalMessage","send","_a","payload","other","message","create","assign","encode","finish","bufferWithHeader","logOutcoming","push","sendDevice","data","last","sendInitialSettings","undefined","initialSettings","sendLegacyDevice","sendSettings","sendText","params","type","text","createVoiceStream","meta","hasFinished","voiceStreamEM","write","voice","systemMessage","JSON","stringify","_b","code","bytes","decoderResultField","decode","hypothesis","normalizedText","isFinal","answerToUser","sendSystemMessage","updateDefauls","obj","destroy","close","clearTimeout","startWebSocket","setTimeout","WebSocket","binaryType","addEventListener","window","readyState","logInit","shift","_c","slice","messages","get","logIncoming","streamToDataToPlayer","setFinish","delete","parse","batch","cb","batchingMessageId","lastMessageSent","checkLastMessageStatus","Error","threeParamsMethods","entries","reduce","acc","curr","key","upgradedSend","upgradedSendText","upgradedCreateVoiceStream","stream","upgradedSendSystemMessage"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Message, Settings, SystemMessage, Device, Text, Voice, LegacyDevice, InitialSettings, } from './proto';\nimport { PacketWrapperFromServer } from './asr';\nimport { createNanoEvents } from './nanoevents';\nimport { createVoicePlayer } from './createVoicePlayer';\nexport const MESSAGE_NAMES = {\n    ANSWER_TO_USER: 'ANSWER_TO_USER',\n    STT: 'STT',\n};\nexport const appendHeader = (buffer) => {\n    // Добавляем 4 байта в начало с длинной сообщения\n    const arrayBuffer = new ArrayBuffer(4);\n    const dataView = new DataView(arrayBuffer, 0);\n    dataView.setInt32(0, buffer.length, true);\n    const uint8Array = new Uint8Array(4 + buffer.length);\n    uint8Array.set(new Uint8Array(arrayBuffer));\n    uint8Array.set(buffer, 4);\n    return uint8Array;\n};\nconst compileBasePayload = ({ userId, token, userChannel, version, messageName, vpsToken, }) => {\n    if (version < 3) {\n        return {\n            userId,\n            token,\n            userChannel,\n            messageName,\n            vpsToken,\n            version,\n        };\n    }\n    return {\n        token,\n        messageName,\n        version,\n    };\n};\nexport const createClient = (clientParams, logger, voiceSettings) => {\n    const { url, userId, token, userChannel, locale, device, settings, legacyDevice, version, messageName, vpsToken, } = clientParams;\n    const basePayload = compileBasePayload({ userId, token, messageName, vpsToken, userChannel, version });\n    let status = 'connecting';\n    const messageQueue = [];\n    const { on, emit, once } = createNanoEvents();\n    const pendingMessages = new Map();\n    const commitedMessages = new Map();\n    let currentSettings = { device, legacyDevice, settings, locale };\n    let currentMessageId = Date.now();\n    let retries = 0;\n    let destroyed = false;\n    let ws;\n    let timeOut;\n    let clearRetryTimer;\n    const voicePlayer = createVoicePlayer(voiceSettings);\n    const getMessageId = () => {\n        return currentMessageId++;\n    };\n    const waitForAnswerToUser = (messageId) => {\n        return new Promise((resolve) => {\n            const off = on('systemMessage', (systemMessageData, originalMessage) => {\n                if (originalMessage.messageId === messageId &&\n                    originalMessage.messageName === MESSAGE_NAMES.ANSWER_TO_USER) {\n                    off();\n                    resolve(systemMessageData);\n                }\n            });\n        });\n    };\n    const send = (_a) => {\n        var { payload, messageId } = _a, other = __rest(_a, [\"payload\", \"messageId\"]);\n        const message = Message.create(Object.assign(Object.assign(Object.assign(Object.assign({ messageName: '' }, basePayload), payload), { messageId }), other));\n        const buffer = Message.encode(message).finish();\n        const bufferWithHeader = appendHeader(buffer);\n        logger === null || logger === void 0 ? void 0 : logger.logOutcoming(message);\n        emit('outcoming', message);\n        if (status === 'ready') {\n            ws.send(bufferWithHeader);\n        }\n        else {\n            messageQueue.push(bufferWithHeader);\n        }\n    };\n    const sendDevice = (data, last = true, messageId = getMessageId()) => {\n        currentSettings = Object.assign(Object.assign({}, currentSettings), { device: data });\n        return send({\n            payload: {\n                device: Device.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId,\n        });\n    };\n    const sendInitialSettings = (data, last = true, messageId = getMessageId()) => {\n        if (data.device && data.settings) {\n            currentSettings = Object.assign(Object.assign({}, currentSettings), { device: data.device, settings: data.settings, locale: data.locale || undefined });\n        }\n        return send({\n            payload: {\n                initialSettings: InitialSettings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId,\n        });\n    };\n    const sendLegacyDevice = (data, last = true, messageId = getMessageId()) => {\n        currentSettings = Object.assign(Object.assign({}, currentSettings), { legacyDevice: data });\n        return send({\n            payload: {\n                legacyDevice: LegacyDevice.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId,\n        });\n    };\n    const sendSettings = (data, last = true, messageId = getMessageId()) => {\n        currentSettings = Object.assign(Object.assign({}, currentSettings), { settings: data });\n        return send({\n            payload: {\n                settings: Settings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId,\n        });\n    };\n    const sendText = (data, params = {}, type = '', messageId = getMessageId()) => {\n        var _a;\n        const text = type ? { data, type } : { data };\n        send(Object.assign({ payload: {\n                text: Text.create(text),\n                last: (_a = params.last) !== null && _a !== void 0 ? _a : 1,\n            }, messageId }, params));\n        return waitForAnswerToUser(messageId);\n    };\n    const createVoiceStream = (meta, messageId = getMessageId()) => {\n        let hasFinished = false;\n        const voiceStreamEM = createNanoEvents();\n        const write = (data, last = false) => {\n            if (!hasFinished) {\n                send({\n                    payload: {\n                        voice: Voice.create({\n                            data: new Uint8Array(data),\n                        }),\n                        last: -1,\n                    },\n                    messageId,\n                });\n                hasFinished = last;\n            }\n        };\n        meta &&\n            send({\n                payload: { systemMessage: SystemMessage.create({ data: JSON.stringify(meta) }), last: -1 },\n                messageId,\n            });\n        on('message', (message) => {\n            var _a, _b;\n            if (message.status && message.status.code != null && message.status.code < 0) {\n                hasFinished = true;\n            }\n            if (message.messageId === messageId && message.messageName === MESSAGE_NAMES.STT) {\n                if (message.last === 1) {\n                    hasFinished = true;\n                    send({ payload: { voice: Voice.create(), last: 1 }, messageId });\n                }\n                if (message.text) {\n                    voiceStreamEM.emit('stt', message.text.data || '', message.last === 1);\n                }\n                if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n                    const { decoderResultField } = PacketWrapperFromServer.decode(message.bytes.data);\n                    if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n                        voiceStreamEM.emit('stt', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal);\n                    }\n                }\n            }\n        });\n        return {\n            write,\n            answerToUser: waitForAnswerToUser(messageId),\n            on: voiceStreamEM.on,\n        };\n    };\n    const sendSystemMessage = ({ data, messageName = '' }, last = true, messageId = getMessageId()) => {\n        send({\n            payload: {\n                systemMessage: SystemMessage.create({\n                    data: JSON.stringify(data),\n                }),\n                messageName,\n                last: last ? 1 : -1,\n            },\n            messageId,\n        });\n        return waitForAnswerToUser(messageId);\n    };\n    const updateDefauls = (obj) => {\n        Object.assign(basePayload, obj);\n    };\n    const destroy = () => {\n        destroyed = true;\n        ws && ws.close();\n        clearTimeout(timeOut);\n        timeOut = undefined;\n    };\n    const startWebSocket = () => {\n        status = 'connecting';\n        setTimeout(() => {\n            emit('connecting');\n        }, 0);\n        ws = new WebSocket(url);\n        ws.binaryType = 'arraybuffer';\n        ws.addEventListener('open', () => {\n            status = 'ready';\n            clearRetryTimer = window.setTimeout(() => {\n                retries = 0;\n            }, 500);\n            if (ws.readyState === 1) {\n                if (version < 3) {\n                    if (version === 1 && currentSettings.legacyDevice) {\n                        sendLegacyDevice(currentSettings.legacyDevice);\n                    }\n                    else if (version === 2 && currentSettings.device) {\n                        sendDevice(currentSettings.device);\n                    }\n                    sendSettings(currentSettings.settings);\n                }\n                else {\n                    sendInitialSettings({\n                        userId,\n                        userChannel,\n                        device: currentSettings.device,\n                        settings: currentSettings.settings,\n                        locale: version > 3 ? currentSettings.locale : undefined,\n                    });\n                }\n                logger === null || logger === void 0 ? void 0 : logger.logInit(Object.assign(Object.assign({}, clientParams), currentSettings));\n                while (messageQueue.length > 0) {\n                    const message = messageQueue.shift();\n                    ws.send(message);\n                }\n            }\n            emit('ready');\n        });\n        ws.addEventListener('close', () => {\n            status = 'closed';\n            clearTimeout(clearRetryTimer);\n            if (!ws || (ws.readyState === 3 && !destroyed)) {\n                if (timeOut) {\n                    clearTimeout(timeOut);\n                }\n                timeOut = window.setTimeout(() => {\n                    startWebSocket();\n                    retries++;\n                }, 300 * retries);\n            }\n            emit('close');\n        });\n        ws.addEventListener('message', (e) => {\n            var _a, _b, _c;\n            const message = Message.decode(new Uint8Array(e.data).slice(4));\n            const messages = pendingMessages.get(message.messageId) || [];\n            logger === null || logger === void 0 ? void 0 : logger.logIncoming(message);\n            messages.push(message);\n            if ((_b = (_a = message.voice) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)\n                voicePlayer.streamToDataToPlayer(message.voice.data);\n            if (message.last === 1) {\n                voicePlayer.setFinish();\n                commitedMessages.set(message.messageId, messages);\n                pendingMessages.delete(message.messageId);\n            }\n            else {\n                pendingMessages.set(message.messageId, messages);\n            }\n            emit('message', message);\n            if ((_c = message.systemMessage) === null || _c === void 0 ? void 0 : _c.data) {\n                const systemMessage = JSON.parse(message.systemMessage.data);\n                emit('systemMessage', systemMessage, message);\n            }\n        });\n    };\n    startWebSocket();\n    const batch = (cb) => {\n        const batchingMessageId = getMessageId();\n        let lastMessageSent = false;\n        const checkLastMessageStatus = (last) => {\n            if (lastMessageSent) {\n                if (last) {\n                    throw new Error(\"Can't send two last items in batch\");\n                }\n                else {\n                    throw new Error(\"Can't send messages in batch after last message have been sent\");\n                }\n            }\n            else if (last) {\n                lastMessageSent = true;\n            }\n        };\n        const threeParamsMethods = Object.entries({\n            sendDevice,\n            sendSettings,\n            sendInitialSettings,\n            sendLegacyDevice,\n        }).reduce((acc, curr) => {\n            const key = curr[0];\n            acc[key] = (...params) => {\n                checkLastMessageStatus(params[1]);\n                return curr[1](params[0], params[1], batchingMessageId);\n            };\n            return acc;\n        }, {});\n        const upgradedSend = (params) => {\n            checkLastMessageStatus(params.payload.last === 1);\n            return send(Object.assign(Object.assign({}, params), { messageId: batchingMessageId }));\n        };\n        const upgradedSendText = (...[data, params, type]) => {\n            checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n            return sendText(data, params, type, batchingMessageId);\n        };\n        const upgradedCreateVoiceStream = (meta) => {\n            const stream = createVoiceStream(meta, batchingMessageId);\n            return Object.assign(Object.assign({}, stream), { write: (data, last) => {\n                    checkLastMessageStatus(last);\n                    return stream.write(data, last);\n                } });\n        };\n        const upgradedSendSystemMessage = (data, last) => {\n            checkLastMessageStatus(last);\n            return sendSystemMessage(data, last, batchingMessageId);\n        };\n        return cb(Object.assign(Object.assign({}, threeParamsMethods), { send: upgradedSend, sendText: upgradedSendText, createVoiceStream: upgradedCreateVoiceStream, sendSystemMessage: upgradedSendSystemMessage }));\n    };\n    return {\n        once,\n        send,\n        sendDevice,\n        sendLegacyDevice,\n        sendSettings,\n        sendText,\n        createVoiceStream,\n        sendSystemMessage,\n        on,\n        updateDefauls,\n        destroy,\n        batch,\n        get currentMessageId() {\n            return currentMessageId;\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}