{"ast":null,"code":"const CURRENT_VERSION = '0.1.0';\nexport const createRecordOfflinePlayer = (record, context = window) => {\n  let currentRecord = record;\n  let entryCursor = 0;\n\n  const playMessage = message => {\n    var _a;\n\n    for (const item of message.items) {\n      if (item.command) {\n        ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData) && context.AssistantClient.onData(item.command);\n      }\n    }\n  };\n\n  const playNext = () => {\n    if (!currentRecord || entryCursor + 1 >= currentRecord.entries.length) {\n      return false;\n    }\n\n    let entry = currentRecord.entries[entryCursor++];\n\n    while ((entry.type !== 'incoming' || entry.message == null) && entryCursor < currentRecord.entries.length) {\n      entry = currentRecord.entries[entryCursor++];\n    }\n\n    if (entry.type === 'incoming') {\n      entry.message && playMessage(entry.message.data);\n    }\n\n    return currentRecord.entries.some((e, i) => {\n      var _a;\n\n      return i > entryCursor && e.type === 'incoming' && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.data) != null;\n    });\n  };\n\n  const play = () => {\n    var _a;\n\n    ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onStart) && context.AssistantClient.onStart();\n\n    if (!currentRecord) {\n      return;\n    }\n\n    let end = false;\n\n    while (!end) {\n      end = !playNext();\n    }\n  };\n\n  const setRecord = rec => {\n    if (rec.version !== CURRENT_VERSION) {\n      throw new Error('Unsupported log version');\n    }\n\n    currentRecord = rec;\n    entryCursor = 0;\n  };\n\n  return {\n    continue: playNext,\n    play,\n    setRecord\n  };\n};","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/node_modules/@sberdevices/assistant-client/dist/record/offline-player.js"],"names":["CURRENT_VERSION","createRecordOfflinePlayer","record","context","window","currentRecord","entryCursor","playMessage","message","_a","item","items","command","AssistantClient","onData","playNext","entries","length","entry","type","data","some","e","i","play","onStart","end","setRecord","rec","version","Error","continue"],"mappings":"AAAA,MAAMA,eAAe,GAAG,OAAxB;AACA,OAAO,MAAMC,yBAAyB,GAAG,CAACC,MAAD,EAASC,OAAO,GAAGC,MAAnB,KAA8B;AACnE,MAAIC,aAAa,GAAGH,MAApB;AACA,MAAII,WAAW,GAAG,CAAlB;;AACA,QAAMC,WAAW,GAAIC,OAAD,IAAa;AAC7B,QAAIC,EAAJ;;AACA,SAAK,MAAMC,IAAX,IAAmBF,OAAO,CAACG,KAA3B,EAAkC;AAC9B,UAAID,IAAI,CAACE,OAAT,EAAkB;AACd,SAAC,CAACH,EAAE,GAAGN,OAAO,CAACU,eAAd,MAAmC,IAAnC,IAA2CJ,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACK,MAAxE,KAAmFX,OAAO,CAACU,eAAR,CAAwBC,MAAxB,CAA+BJ,IAAI,CAACE,OAApC,CAAnF;AACH;AACJ;AACJ,GAPD;;AAQA,QAAMG,QAAQ,GAAG,MAAM;AACnB,QAAI,CAACV,aAAD,IAAkBC,WAAW,GAAG,CAAd,IAAmBD,aAAa,CAACW,OAAd,CAAsBC,MAA/D,EAAuE;AACnE,aAAO,KAAP;AACH;;AACD,QAAIC,KAAK,GAAGb,aAAa,CAACW,OAAd,CAAsBV,WAAW,EAAjC,CAAZ;;AACA,WAAO,CAACY,KAAK,CAACC,IAAN,KAAe,UAAf,IAA6BD,KAAK,CAACV,OAAN,IAAiB,IAA/C,KAAwDF,WAAW,GAAGD,aAAa,CAACW,OAAd,CAAsBC,MAAnG,EAA2G;AACvGC,MAAAA,KAAK,GAAGb,aAAa,CAACW,OAAd,CAAsBV,WAAW,EAAjC,CAAR;AACH;;AACD,QAAIY,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC3BD,MAAAA,KAAK,CAACV,OAAN,IAAiBD,WAAW,CAACW,KAAK,CAACV,OAAN,CAAcY,IAAf,CAA5B;AACH;;AACD,WAAOf,aAAa,CAACW,OAAd,CAAsBK,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,UAAId,EAAJ;;AAAQ,aAAOc,CAAC,GAAGjB,WAAJ,IAAmBgB,CAAC,CAACH,IAAF,KAAW,UAA9B,IAA4C,CAAC,CAACV,EAAE,GAAGa,CAAC,CAACd,OAAR,MAAqB,IAArB,IAA6BC,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACW,IAA1D,KAAmE,IAAtH;AAA6H,KAA5K,CAAP;AACH,GAZD;;AAaA,QAAMI,IAAI,GAAG,MAAM;AACf,QAAIf,EAAJ;;AACA,KAAC,CAACA,EAAE,GAAGN,OAAO,CAACU,eAAd,MAAmC,IAAnC,IAA2CJ,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACgB,OAAxE,KAAoFtB,OAAO,CAACU,eAAR,CAAwBY,OAAxB,EAApF;;AACA,QAAI,CAACpB,aAAL,EAAoB;AAChB;AACH;;AACD,QAAIqB,GAAG,GAAG,KAAV;;AACA,WAAO,CAACA,GAAR,EAAa;AACTA,MAAAA,GAAG,GAAG,CAACX,QAAQ,EAAf;AACH;AACJ,GAVD;;AAWA,QAAMY,SAAS,GAAIC,GAAD,IAAS;AACvB,QAAIA,GAAG,CAACC,OAAJ,KAAgB7B,eAApB,EAAqC;AACjC,YAAM,IAAI8B,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACDzB,IAAAA,aAAa,GAAGuB,GAAhB;AACAtB,IAAAA,WAAW,GAAG,CAAd;AACH,GAND;;AAOA,SAAO;AACHyB,IAAAA,QAAQ,EAAEhB,QADP;AAEHS,IAAAA,IAFG;AAGHG,IAAAA;AAHG,GAAP;AAKH,CA/CM","sourcesContent":["const CURRENT_VERSION = '0.1.0';\nexport const createRecordOfflinePlayer = (record, context = window) => {\n    let currentRecord = record;\n    let entryCursor = 0;\n    const playMessage = (message) => {\n        var _a;\n        for (const item of message.items) {\n            if (item.command) {\n                ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData) && context.AssistantClient.onData(item.command);\n            }\n        }\n    };\n    const playNext = () => {\n        if (!currentRecord || entryCursor + 1 >= currentRecord.entries.length) {\n            return false;\n        }\n        let entry = currentRecord.entries[entryCursor++];\n        while ((entry.type !== 'incoming' || entry.message == null) && entryCursor < currentRecord.entries.length) {\n            entry = currentRecord.entries[entryCursor++];\n        }\n        if (entry.type === 'incoming') {\n            entry.message && playMessage(entry.message.data);\n        }\n        return currentRecord.entries.some((e, i) => { var _a; return i > entryCursor && e.type === 'incoming' && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.data) != null; });\n    };\n    const play = () => {\n        var _a;\n        ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onStart) && context.AssistantClient.onStart();\n        if (!currentRecord) {\n            return;\n        }\n        let end = false;\n        while (!end) {\n            end = !playNext();\n        }\n    };\n    const setRecord = (rec) => {\n        if (rec.version !== CURRENT_VERSION) {\n            throw new Error('Unsupported log version');\n        }\n        currentRecord = rec;\n        entryCursor = 0;\n    };\n    return {\n        continue: playNext,\n        play,\n        setRecord,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}