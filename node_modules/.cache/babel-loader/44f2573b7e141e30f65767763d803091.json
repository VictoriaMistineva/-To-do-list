{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zelairy/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/todo-canvas-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useReducer, useState, useRef, useEffect } from \"react\";\nimport { createSmartappDebugger, createAssistant } from \"@sberdevices/assistant-client\";\nimport \"./App.css\";\nimport { reducer } from \"./store\";\n\nconst initializeAssistant = getState => {\n  if (process.env.NODE_ENV === \"development\") {\n    var _process$env$REACT_AP;\n\n    return createSmartappDebugger({\n      token: (_process$env$REACT_AP = process.env.REACT_APP_TOKEN) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : \"\",\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState\n    });\n  }\n\n  return createAssistant({\n    getState\n  });\n};\n\nexport const App = /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n\n  const [appState, dispatch] = useReducer(reducer, {\n    notes: []\n  });\n  const [note, setNote] = useState(\"\");\n  const assistantStateRef = useRef();\n  const assistantRef = useRef();\n  useEffect(() => {\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n    assistantRef.current.on(\"data\", ({\n      action\n    }) => {\n      if (action) {\n        dispatch(action);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    assistantStateRef.current = {\n      item_selector: {\n        items: appState.notes.map(({\n          id,\n          title\n        }, index) => ({\n          number: index + 1,\n          id,\n          title\n        }))\n      }\n    };\n  }, [appState]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        dispatch({\n          type: \"add_note\",\n          note\n        });\n        setNote(\"\");\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"add-note\",\n        type: \"text\",\n        placeholder: \"Add Note\",\n        value: note,\n        onChange: ({\n          target: {\n            value\n          }\n        }) => setNote(value),\n        required: true,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"notes\",\n      children: appState.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontWeight: \"bold\"\n            },\n            children: [index + 1, \". \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              textDecorationLine: note.completed ? \"line-through\" : \"none\"\n            },\n            children: note.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"done-note\",\n          type: \"checkbox\",\n          checked: note.completed,\n          onChange: () => dispatch({\n            type: \"done_note\",\n            id: note.id\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}, \"Dq/WJI19XaK1Z3IUgeE343G3i1Q=\"));\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App$memo\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/src/App.tsx"],"names":["React","memo","useReducer","useState","useRef","useEffect","createSmartappDebugger","createAssistant","reducer","initializeAssistant","getState","process","env","NODE_ENV","token","REACT_APP_TOKEN","initPhrase","REACT_APP_SMARTAPP","App","appState","dispatch","notes","note","setNote","assistantStateRef","assistantRef","current","on","action","item_selector","items","map","id","title","index","number","event","preventDefault","type","target","value","fontWeight","textDecorationLine","completed"],"mappings":"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","sourcesContent":["import React, {\n  FC,\n  memo,\n  useReducer,\n  useState,\n  useRef,\n  useEffect,\n} from \"react\";\nimport {\n  createSmartappDebugger,\n  createAssistant,\n  AssistantAppState,\n} from \"@sberdevices/assistant-client\";\nimport \"./App.css\";\n\nimport { reducer } from \"./store\";\n\nconst initializeAssistant = (getState: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return createSmartappDebugger({\n      token: process.env.REACT_APP_TOKEN ?? \"\",\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState,\n    });\n  }\n\n  return createAssistant({ getState });\n};\n\nexport const App: FC = memo(() => {\n  const [appState, dispatch] = useReducer(reducer, { notes: [] });\n\n  const [note, setNote] = useState(\"\");\n\n  const assistantStateRef = useRef<AssistantAppState>();\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n\n  useEffect(() => {\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n    assistantRef.current.on(\"data\", ({ action }: any) => {\n      if (action) {\n        dispatch(action);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    assistantStateRef.current = {\n      item_selector: {\n        items: appState.notes.map(({ id, title }, index) => ({\n          number: index + 1,\n          id,\n          title,\n        })),\n      },\n    };\n  }, [appState]);\n\n  return (\n    <main className=\"container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          dispatch({ type: \"add_note\", note });\n          setNote(\"\");\n        }}\n      >\n        <input\n          className=\"add-note\"\n          type=\"text\"\n          placeholder=\"Add Note\"\n          value={note}\n          onChange={({ target: { value } }) => setNote(value)}\n          required\n          autoFocus\n        />\n      </form>\n      <ul className=\"notes\">\n        {appState.notes.map((note, index) => (\n          <li className=\"note\" key={note.id}>\n            <span>\n              <span style={{ fontWeight: \"bold\" }}>{index + 1}. </span>\n              <span\n                style={{\n                  textDecorationLine: note.completed ? \"line-through\" : \"none\",\n                }}\n              >\n                {note.title}\n              </span>\n            </span>\n            <input\n              className=\"done-note\"\n              type=\"checkbox\"\n              checked={note.completed}\n              onChange={() => dispatch({ type: \"done_note\", id: note.id })}\n            />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}