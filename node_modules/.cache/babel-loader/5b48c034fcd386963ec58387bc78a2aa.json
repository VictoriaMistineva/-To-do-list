{"ast":null,"code":"/* stylelint-disable */\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { createAudioRecorder } from '../createAudioRecorder';\nimport assistantSphereIcon from './sphere.png';\nimport './styles.css';\nexport const NativePanel = ({\n  defaultText,\n  sendText,\n  className,\n  tabIndex,\n  createVoiceStream,\n  suggestions\n}) => {\n  const [value, setValue] = useState(defaultText);\n  const [recording, setRecording] = useState(false);\n\n  const handleSphereClick = () => {\n    setValue('');\n    setRecording(!recording);\n  };\n\n  const createSuggestClickHandler = suggest => () => {\n    const {\n      action\n    } = suggest;\n\n    if (action.type === 'text' && action.text != null) {\n      sendText(action.text);\n    }\n  };\n\n  useEffect(() => {\n    if (recording) {\n      let outerAudioRecorder = null;\n      let outerStream = null;\n      let finished = false;\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        outerStream = stream;\n        const audioRecorder = createAudioRecorder(stream);\n        outerAudioRecorder = audioRecorder;\n        const voiceStream = createVoiceStream();\n        audioRecorder.start();\n        audioRecorder.on('data', (chunk, last) => {\n          if (!finished) {\n            voiceStream.write(new Uint8Array(chunk), last);\n          }\n        });\n        voiceStream.on('stt', (text, last) => {\n          if (last) {\n            finished = true;\n            setRecording(false);\n            setValue('');\n          } else {\n            setValue(text);\n          }\n        });\n      });\n      return () => {\n        outerAudioRecorder === null || outerAudioRecorder === void 0 ? void 0 : outerAudioRecorder.stop();\n\n        if (outerStream) {\n          outerStream.getTracks().forEach(track => track.stop());\n        }\n      };\n    }\n\n    return undefined;\n  }, [createVoiceStream, recording, sendText]);\n  return React.createElement(\"div\", {\n    className: className ? `nativePanel ${className}` : 'nativePanel'\n  }, React.createElement(\"div\", {\n    className: recording ? 'sphere active' : 'sphere',\n    onClick: () => {\n      if (!recording) {\n        handleSphereClick();\n      }\n    },\n    style: {\n      backgroundImage: `url(${assistantSphereIcon})`\n    }\n  }), React.createElement(\"label\", {\n    htmlFor: \"voice\",\n    className: \"label\"\n  }, \"\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435\"), React.createElement(\"input\", {\n    id: \"voice\",\n    value: value,\n    onChange: e => {\n      setValue(e.currentTarget.value);\n    },\n    tabIndex: typeof tabIndex === 'number' && Number.isInteger(tabIndex) ? tabIndex : -1,\n    disabled: recording,\n    onKeyDown: e => {\n      if (e.key === 'Enter') {\n        sendText(value);\n        setValue('');\n      }\n    },\n    className: \"input\"\n  }), React.createElement(\"div\", {\n    className: \"suggestPanel\"\n  }, suggestions.map(s => React.createElement(\"div\", {\n    key: `suggest-${s.title}`,\n    onClick: createSuggestClickHandler(s),\n    className: \"suggest\"\n  }, s.title))));\n};\nlet div;\nexport const renderNativePanel = props => {\n  if (!div) {\n    div = document.createElement('div');\n    document.body.appendChild(div);\n  }\n\n  render(React.createElement(NativePanel, Object.assign({}, props)), div);\n};","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/node_modules/@sberdevices/assistant-client/dist/NativePanel/NativePanel.js"],"names":["React","useState","useEffect","render","createAudioRecorder","assistantSphereIcon","NativePanel","defaultText","sendText","className","tabIndex","createVoiceStream","suggestions","value","setValue","recording","setRecording","handleSphereClick","createSuggestClickHandler","suggest","action","type","text","outerAudioRecorder","outerStream","finished","navigator","mediaDevices","getUserMedia","audio","then","stream","audioRecorder","voiceStream","start","on","chunk","last","write","Uint8Array","stop","getTracks","forEach","track","undefined","createElement","onClick","style","backgroundImage","htmlFor","id","onChange","e","currentTarget","Number","isInteger","disabled","onKeyDown","key","map","s","title","div","renderNativePanel","props","document","body","appendChild","Object","assign"],"mappings":"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","sourcesContent":["/* stylelint-disable */\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { createAudioRecorder } from '../createAudioRecorder';\nimport assistantSphereIcon from './sphere.png';\nimport './styles.css';\nexport const NativePanel = ({ defaultText, sendText, className, tabIndex, createVoiceStream, suggestions, }) => {\n    const [value, setValue] = useState(defaultText);\n    const [recording, setRecording] = useState(false);\n    const handleSphereClick = () => {\n        setValue('');\n        setRecording(!recording);\n    };\n    const createSuggestClickHandler = (suggest) => () => {\n        const { action } = suggest;\n        if (action.type === 'text' && action.text != null) {\n            sendText(action.text);\n        }\n    };\n    useEffect(() => {\n        if (recording) {\n            let outerAudioRecorder = null;\n            let outerStream = null;\n            let finished = false;\n            navigator.mediaDevices\n                .getUserMedia({\n                audio: true,\n            })\n                .then((stream) => {\n                outerStream = stream;\n                const audioRecorder = createAudioRecorder(stream);\n                outerAudioRecorder = audioRecorder;\n                const voiceStream = createVoiceStream();\n                audioRecorder.start();\n                audioRecorder.on('data', (chunk, last) => {\n                    if (!finished) {\n                        voiceStream.write(new Uint8Array(chunk), last);\n                    }\n                });\n                voiceStream.on('stt', (text, last) => {\n                    if (last) {\n                        finished = true;\n                        setRecording(false);\n                        setValue('');\n                    }\n                    else {\n                        setValue(text);\n                    }\n                });\n            });\n            return () => {\n                outerAudioRecorder === null || outerAudioRecorder === void 0 ? void 0 : outerAudioRecorder.stop();\n                if (outerStream) {\n                    outerStream.getTracks().forEach((track) => track.stop());\n                }\n            };\n        }\n        return undefined;\n    }, [createVoiceStream, recording, sendText]);\n    return (React.createElement(\"div\", { className: className ? `nativePanel ${className}` : 'nativePanel' },\n        React.createElement(\"div\", { className: recording ? 'sphere active' : 'sphere', onClick: () => {\n                if (!recording) {\n                    handleSphereClick();\n                }\n            }, style: {\n                backgroundImage: `url(${assistantSphereIcon})`,\n            } }),\n        React.createElement(\"label\", { htmlFor: \"voice\", className: \"label\" }, \"\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435\"),\n        React.createElement(\"input\", { id: \"voice\", value: value, onChange: (e) => {\n                setValue(e.currentTarget.value);\n            }, tabIndex: typeof tabIndex === 'number' && Number.isInteger(tabIndex) ? tabIndex : -1, disabled: recording, onKeyDown: (e) => {\n                if (e.key === 'Enter') {\n                    sendText(value);\n                    setValue('');\n                }\n            }, className: \"input\" }),\n        React.createElement(\"div\", { className: \"suggestPanel\" }, suggestions.map((s) => (React.createElement(\"div\", { key: `suggest-${s.title}`, onClick: createSuggestClickHandler(s), className: \"suggest\" }, s.title))))));\n};\nlet div;\nexport const renderNativePanel = (props) => {\n    if (!div) {\n        div = document.createElement('div');\n        document.body.appendChild(div);\n    }\n    render(React.createElement(NativePanel, Object.assign({}, props)), div);\n};\n"]},"metadata":{},"sourceType":"module"}