{"ast":null,"code":"\"use strict\";\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n(function (global, factory) {\n  /* global define, require, module */\n\n  /* AMD */\n  if (typeof define === 'function' && define.amd) define(['protobufjs/minimal'], factory);\n  /* CommonJS */\n  else if (typeof require === 'function' && typeof module === 'object' && module && module.exports) module.exports = factory(require('protobufjs/minimal'));\n})(this, function ($protobuf) {\n  'use strict'; // Common aliases\n\n  var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util; // Exported root namespace\n\n  var $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});\n\n  $root.Message = function () {\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {string|null} [userId] Message userId\n     * @property {number|Long|null} [messageId] Message messageId\n     * @property {number|null} [last] Message last\n     * @property {string|null} [token] Message token\n     * @property {string|null} [userChannel] Message userChannel\n     * @property {string|null} [vpsToken] Message vpsToken\n     * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n     * @property {string|null} [messageName] Message messageName\n     * @property {number|null} [version] Message version\n     * @property {IVoice|null} [voice] Message voice\n     * @property {IText|null} [text] Message text\n     * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n     * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n     * @property {ISettings|null} [settings] Message settings\n     * @property {IStatus|null} [status] Message status\n     * @property {IDevice|null} [device] Message device\n     * @property {IBytes|null} [bytes] Message bytes\n     * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [properties] Properties to set\n     */\n    function Message(properties) {\n      this.devContext = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Message userId.\n     * @member {string} userId\n     * @memberof Message\n     * @instance\n     */\n\n\n    Message.prototype.userId = '';\n    /**\n     * Message messageId.\n     * @member {number|Long} messageId\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Message last.\n     * @member {number} last\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.last = 0;\n    /**\n     * Message token.\n     * @member {string} token\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.token = '';\n    /**\n     * Message userChannel.\n     * @member {string} userChannel\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.userChannel = '';\n    /**\n     * Message vpsToken.\n     * @member {string} vpsToken\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.vpsToken = '';\n    /**\n     * Устарело с версии 3.\n     * @member {Array.<IDevContext>} devContext\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.devContext = $util.emptyArray;\n    /**\n     * Message messageName.\n     * @member {string} messageName\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.messageName = '';\n    /**\n     * Message version.\n     * @member {number} version\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.version = 0;\n    /**\n     * Message voice.\n     * @member {IVoice|null|undefined} voice\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.voice = null;\n    /**\n     * Message text.\n     * @member {IText|null|undefined} text\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.text = null;\n    /**\n     * Message systemMessage.\n     * @member {ISystemMessage|null|undefined} systemMessage\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.systemMessage = null;\n    /**\n     * Message legacyDevice.\n     * @member {ILegacyDevice|null|undefined} legacyDevice\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.legacyDevice = null;\n    /**\n     * Message settings.\n     * @member {ISettings|null|undefined} settings\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.settings = null;\n    /**\n     * Message status.\n     * @member {IStatus|null|undefined} status\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.status = null;\n    /**\n     * Message device.\n     * @member {IDevice|null|undefined} device\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.device = null;\n    /**\n     * Message bytes.\n     * @member {IBytes|null|undefined} bytes\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.bytes = null;\n    /**\n     * Message initialSettings.\n     * @member {IInitialSettings|null|undefined} initialSettings\n     * @memberof Message\n     * @instance\n     */\n\n    Message.prototype.initialSettings = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * Message content.\n     * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|undefined} content\n     * @memberof Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, 'content', {\n      get: $util.oneOfGetter($oneOfFields = ['voice', 'text', 'systemMessage', 'legacyDevice', 'settings', 'status', 'device', 'bytes', 'initialSettings']),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new Message instance using the specified properties.\n     * @function create\n     * @memberof Message\n     * @static\n     * @param {IMessage=} [properties] Properties to set\n     * @returns {Message} Message instance\n     */\n\n    Message.create = function create(properties) {\n      return new Message(properties);\n    };\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Message.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.userId != null && Object.hasOwnProperty.call(message, 'userId')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.userId);\n      if (message.messageId != null && Object.hasOwnProperty.call(message, 'messageId')) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int64(message.messageId);\n      if (message.last != null && Object.hasOwnProperty.call(message, 'last')) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).int32(message.last);\n      if (message.token != null && Object.hasOwnProperty.call(message, 'token')) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.token);\n      if (message.voice != null && Object.hasOwnProperty.call(message, 'voice')) $root.Voice.encode(message.voice, writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork()).ldelim();\n      if (message.text != null && Object.hasOwnProperty.call(message, 'text')) $root.Text.encode(message.text, writer.uint32(\n      /* id 6, wireType 2 =*/\n      50).fork()).ldelim();\n      if (message.systemMessage != null && Object.hasOwnProperty.call(message, 'systemMessage')) $root.SystemMessage.encode(message.systemMessage, writer.uint32(\n      /* id 7, wireType 2 =*/\n      58).fork()).ldelim();\n      if (message.legacyDevice != null && Object.hasOwnProperty.call(message, 'legacyDevice')) $root.LegacyDevice.encode(message.legacyDevice, writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).fork()).ldelim();\n      if (message.settings != null && Object.hasOwnProperty.call(message, 'settings')) $root.Settings.encode(message.settings, writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).fork()).ldelim();\n      if (message.status != null && Object.hasOwnProperty.call(message, 'status')) $root.Status.encode(message.status, writer.uint32(\n      /* id 10, wireType 2 =*/\n      82).fork()).ldelim();\n      if (message.userChannel != null && Object.hasOwnProperty.call(message, 'userChannel')) writer.uint32(\n      /* id 11, wireType 2 =*/\n      90).string(message.userChannel);\n      if (message.vpsToken != null && Object.hasOwnProperty.call(message, 'vpsToken')) writer.uint32(\n      /* id 12, wireType 2 =*/\n      98).string(message.vpsToken);\n      if (message.devContext != null && message.devContext.length) for (var i = 0; i < message.devContext.length; ++i) $root.DevContext.encode(message.devContext[i], writer.uint32(\n      /* id 13, wireType 2 =*/\n      106).fork()).ldelim();\n      if (message.messageName != null && Object.hasOwnProperty.call(message, 'messageName')) writer.uint32(\n      /* id 14, wireType 2 =*/\n      114).string(message.messageName);\n      if (message.version != null && Object.hasOwnProperty.call(message, 'version')) writer.uint32(\n      /* id 15, wireType 0 =*/\n      120).int32(message.version);\n      if (message.device != null && Object.hasOwnProperty.call(message, 'device')) $root.Device.encode(message.device, writer.uint32(\n      /* id 16, wireType 2 =*/\n      130).fork()).ldelim();\n      if (message.bytes != null && Object.hasOwnProperty.call(message, 'bytes')) $root.Bytes.encode(message.bytes, writer.uint32(\n      /* id 17, wireType 2 =*/\n      138).fork()).ldelim();\n      if (message.initialSettings != null && Object.hasOwnProperty.call(message, 'initialSettings')) $root.InitialSettings.encode(message.initialSettings, writer.uint32(\n      /* id 18, wireType 2 =*/\n      146).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Message.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Message.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Message();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.userId = reader.string();\n            break;\n\n          case 2:\n            message.messageId = reader.int64();\n            break;\n\n          case 3:\n            message.last = reader.int32();\n            break;\n\n          case 4:\n            message.token = reader.string();\n            break;\n\n          case 11:\n            message.userChannel = reader.string();\n            break;\n\n          case 12:\n            message.vpsToken = reader.string();\n            break;\n\n          case 13:\n            if (!(message.devContext && message.devContext.length)) message.devContext = [];\n            message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n            break;\n\n          case 14:\n            message.messageName = reader.string();\n            break;\n\n          case 15:\n            message.version = reader.int32();\n            break;\n\n          case 5:\n            message.voice = $root.Voice.decode(reader, reader.uint32());\n            break;\n\n          case 6:\n            message.text = $root.Text.decode(reader, reader.uint32());\n            break;\n\n          case 7:\n            message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n            break;\n\n          case 8:\n            message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n            break;\n\n          case 9:\n            message.settings = $root.Settings.decode(reader, reader.uint32());\n            break;\n\n          case 10:\n            message.status = $root.Status.decode(reader, reader.uint32());\n            break;\n\n          case 16:\n            message.device = $root.Device.decode(reader, reader.uint32());\n            break;\n\n          case 17:\n            message.bytes = $root.Bytes.decode(reader, reader.uint32());\n            break;\n\n          case 18:\n            message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Message message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Message.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Message message.\n     * @function verify\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Message.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      var properties = {};\n      if (message.userId != null && message.hasOwnProperty('userId')) if (!$util.isString(message.userId)) return 'userId: string expected';\n      if (message.messageId != null && message.hasOwnProperty('messageId')) if (!$util.isInteger(message.messageId) && !(message.messageId && $util.isInteger(message.messageId.low) && $util.isInteger(message.messageId.high))) return 'messageId: integer|Long expected';\n      if (message.last != null && message.hasOwnProperty('last')) if (!$util.isInteger(message.last)) return 'last: integer expected';\n      if (message.token != null && message.hasOwnProperty('token')) if (!$util.isString(message.token)) return 'token: string expected';\n      if (message.userChannel != null && message.hasOwnProperty('userChannel')) if (!$util.isString(message.userChannel)) return 'userChannel: string expected';\n      if (message.vpsToken != null && message.hasOwnProperty('vpsToken')) if (!$util.isString(message.vpsToken)) return 'vpsToken: string expected';\n\n      if (message.devContext != null && message.hasOwnProperty('devContext')) {\n        if (!Array.isArray(message.devContext)) return 'devContext: array expected';\n\n        for (var i = 0; i < message.devContext.length; ++i) {\n          var error = $root.DevContext.verify(message.devContext[i]);\n          if (error) return 'devContext.' + error;\n        }\n      }\n\n      if (message.messageName != null && message.hasOwnProperty('messageName')) if (!$util.isString(message.messageName)) return 'messageName: string expected';\n      if (message.version != null && message.hasOwnProperty('version')) if (!$util.isInteger(message.version)) return 'version: integer expected';\n\n      if (message.voice != null && message.hasOwnProperty('voice')) {\n        properties.content = 1;\n        {\n          var error = $root.Voice.verify(message.voice);\n          if (error) return 'voice.' + error;\n        }\n      }\n\n      if (message.text != null && message.hasOwnProperty('text')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.Text.verify(message.text);\n          if (error) return 'text.' + error;\n        }\n      }\n\n      if (message.systemMessage != null && message.hasOwnProperty('systemMessage')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.SystemMessage.verify(message.systemMessage);\n          if (error) return 'systemMessage.' + error;\n        }\n      }\n\n      if (message.legacyDevice != null && message.hasOwnProperty('legacyDevice')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.LegacyDevice.verify(message.legacyDevice);\n          if (error) return 'legacyDevice.' + error;\n        }\n      }\n\n      if (message.settings != null && message.hasOwnProperty('settings')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.Settings.verify(message.settings);\n          if (error) return 'settings.' + error;\n        }\n      }\n\n      if (message.status != null && message.hasOwnProperty('status')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.Status.verify(message.status);\n          if (error) return 'status.' + error;\n        }\n      }\n\n      if (message.device != null && message.hasOwnProperty('device')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.Device.verify(message.device);\n          if (error) return 'device.' + error;\n        }\n      }\n\n      if (message.bytes != null && message.hasOwnProperty('bytes')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.Bytes.verify(message.bytes);\n          if (error) return 'bytes.' + error;\n        }\n      }\n\n      if (message.initialSettings != null && message.hasOwnProperty('initialSettings')) {\n        if (properties.content === 1) return 'content: multiple values';\n        properties.content = 1;\n        {\n          var error = $root.InitialSettings.verify(message.initialSettings);\n          if (error) return 'initialSettings.' + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Message} Message\n     */\n\n\n    Message.fromObject = function fromObject(object) {\n      if (object instanceof $root.Message) return object;\n      var message = new $root.Message();\n      if (object.userId != null) message.userId = String(object.userId);\n      if (object.messageId != null) if ($util.Long) (message.messageId = $util.Long.fromValue(object.messageId)).unsigned = false;else if (typeof object.messageId === 'string') message.messageId = parseInt(object.messageId, 10);else if (typeof object.messageId === 'number') message.messageId = object.messageId;else if (typeof object.messageId === 'object') message.messageId = new $util.LongBits(object.messageId.low >>> 0, object.messageId.high >>> 0).toNumber();\n      if (object.last != null) message.last = object.last | 0;\n      if (object.token != null) message.token = String(object.token);\n      if (object.userChannel != null) message.userChannel = String(object.userChannel);\n      if (object.vpsToken != null) message.vpsToken = String(object.vpsToken);\n\n      if (object.devContext) {\n        if (!Array.isArray(object.devContext)) throw TypeError('.Message.devContext: array expected');\n        message.devContext = [];\n\n        for (var i = 0; i < object.devContext.length; ++i) {\n          if (typeof object.devContext[i] !== 'object') throw TypeError('.Message.devContext: object expected');\n          message.devContext[i] = $root.DevContext.fromObject(object.devContext[i]);\n        }\n      }\n\n      if (object.messageName != null) message.messageName = String(object.messageName);\n      if (object.version != null) message.version = object.version | 0;\n\n      if (object.voice != null) {\n        if (typeof object.voice !== 'object') throw TypeError('.Message.voice: object expected');\n        message.voice = $root.Voice.fromObject(object.voice);\n      }\n\n      if (object.text != null) {\n        if (typeof object.text !== 'object') throw TypeError('.Message.text: object expected');\n        message.text = $root.Text.fromObject(object.text);\n      }\n\n      if (object.systemMessage != null) {\n        if (typeof object.systemMessage !== 'object') throw TypeError('.Message.systemMessage: object expected');\n        message.systemMessage = $root.SystemMessage.fromObject(object.systemMessage);\n      }\n\n      if (object.legacyDevice != null) {\n        if (typeof object.legacyDevice !== 'object') throw TypeError('.Message.legacyDevice: object expected');\n        message.legacyDevice = $root.LegacyDevice.fromObject(object.legacyDevice);\n      }\n\n      if (object.settings != null) {\n        if (typeof object.settings !== 'object') throw TypeError('.Message.settings: object expected');\n        message.settings = $root.Settings.fromObject(object.settings);\n      }\n\n      if (object.status != null) {\n        if (typeof object.status !== 'object') throw TypeError('.Message.status: object expected');\n        message.status = $root.Status.fromObject(object.status);\n      }\n\n      if (object.device != null) {\n        if (typeof object.device !== 'object') throw TypeError('.Message.device: object expected');\n        message.device = $root.Device.fromObject(object.device);\n      }\n\n      if (object.bytes != null) {\n        if (typeof object.bytes !== 'object') throw TypeError('.Message.bytes: object expected');\n        message.bytes = $root.Bytes.fromObject(object.bytes);\n      }\n\n      if (object.initialSettings != null) {\n        if (typeof object.initialSettings !== 'object') throw TypeError('.Message.initialSettings: object expected');\n        message.initialSettings = $root.InitialSettings.fromObject(object.initialSettings);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} message Message\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Message.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.devContext = [];\n\n      if (options.defaults) {\n        object.userId = '';\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.messageId = options.longs === String ? '0' : 0;\n\n        object.last = 0;\n        object.token = '';\n        object.userChannel = '';\n        object.vpsToken = '';\n        object.messageName = '';\n        object.version = 0;\n      }\n\n      if (message.userId != null && message.hasOwnProperty('userId')) object.userId = message.userId;\n      if (message.messageId != null && message.hasOwnProperty('messageId')) if (typeof message.messageId === 'number') object.messageId = options.longs === String ? String(message.messageId) : message.messageId;else object.messageId = options.longs === String ? $util.Long.prototype.toString.call(message.messageId) : options.longs === Number ? new $util.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0).toNumber() : message.messageId;\n      if (message.last != null && message.hasOwnProperty('last')) object.last = message.last;\n      if (message.token != null && message.hasOwnProperty('token')) object.token = message.token;\n\n      if (message.voice != null && message.hasOwnProperty('voice')) {\n        object.voice = $root.Voice.toObject(message.voice, options);\n        if (options.oneofs) object.content = 'voice';\n      }\n\n      if (message.text != null && message.hasOwnProperty('text')) {\n        object.text = $root.Text.toObject(message.text, options);\n        if (options.oneofs) object.content = 'text';\n      }\n\n      if (message.systemMessage != null && message.hasOwnProperty('systemMessage')) {\n        object.systemMessage = $root.SystemMessage.toObject(message.systemMessage, options);\n        if (options.oneofs) object.content = 'systemMessage';\n      }\n\n      if (message.legacyDevice != null && message.hasOwnProperty('legacyDevice')) {\n        object.legacyDevice = $root.LegacyDevice.toObject(message.legacyDevice, options);\n        if (options.oneofs) object.content = 'legacyDevice';\n      }\n\n      if (message.settings != null && message.hasOwnProperty('settings')) {\n        object.settings = $root.Settings.toObject(message.settings, options);\n        if (options.oneofs) object.content = 'settings';\n      }\n\n      if (message.status != null && message.hasOwnProperty('status')) {\n        object.status = $root.Status.toObject(message.status, options);\n        if (options.oneofs) object.content = 'status';\n      }\n\n      if (message.userChannel != null && message.hasOwnProperty('userChannel')) object.userChannel = message.userChannel;\n      if (message.vpsToken != null && message.hasOwnProperty('vpsToken')) object.vpsToken = message.vpsToken;\n\n      if (message.devContext && message.devContext.length) {\n        object.devContext = [];\n\n        for (var j = 0; j < message.devContext.length; ++j) object.devContext[j] = $root.DevContext.toObject(message.devContext[j], options);\n      }\n\n      if (message.messageName != null && message.hasOwnProperty('messageName')) object.messageName = message.messageName;\n      if (message.version != null && message.hasOwnProperty('version')) object.version = message.version;\n\n      if (message.device != null && message.hasOwnProperty('device')) {\n        object.device = $root.Device.toObject(message.device, options);\n        if (options.oneofs) object.content = 'device';\n      }\n\n      if (message.bytes != null && message.hasOwnProperty('bytes')) {\n        object.bytes = $root.Bytes.toObject(message.bytes, options);\n        if (options.oneofs) object.content = 'bytes';\n      }\n\n      if (message.initialSettings != null && message.hasOwnProperty('initialSettings')) {\n        object.initialSettings = $root.InitialSettings.toObject(message.initialSettings, options);\n        if (options.oneofs) object.content = 'initialSettings';\n      }\n\n      return object;\n    };\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Message.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Message;\n  }();\n\n  $root.InitialSettings = function () {\n    /**\n     * Properties of an InitialSettings.\n     * @exports IInitialSettings\n     * @interface IInitialSettings\n     * @property {string|null} [userId] InitialSettings userId\n     * @property {string|null} [userChannel] InitialSettings userChannel\n     * @property {IDevice|null} [device] InitialSettings device\n     * @property {ISettings|null} [settings] InitialSettings settings\n     * @property {string|null} [locale] InitialSettings locale\n     */\n\n    /**\n     * Constructs a new InitialSettings.\n     * @exports InitialSettings\n     * @classdesc Represents an InitialSettings.\n     * @implements IInitialSettings\n     * @constructor\n     * @param {IInitialSettings=} [properties] Properties to set\n     */\n    function InitialSettings(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * InitialSettings userId.\n     * @member {string} userId\n     * @memberof InitialSettings\n     * @instance\n     */\n\n\n    InitialSettings.prototype.userId = '';\n    /**\n     * InitialSettings userChannel.\n     * @member {string} userChannel\n     * @memberof InitialSettings\n     * @instance\n     */\n\n    InitialSettings.prototype.userChannel = '';\n    /**\n     * InitialSettings device.\n     * @member {IDevice|null|undefined} device\n     * @memberof InitialSettings\n     * @instance\n     */\n\n    InitialSettings.prototype.device = null;\n    /**\n     * InitialSettings settings.\n     * @member {ISettings|null|undefined} settings\n     * @memberof InitialSettings\n     * @instance\n     */\n\n    InitialSettings.prototype.settings = null;\n    /**\n     * InitialSettings locale.\n     * @member {string} locale\n     * @memberof InitialSettings\n     * @instance\n     */\n\n    InitialSettings.prototype.locale = '';\n    /**\n     * Creates a new InitialSettings instance using the specified properties.\n     * @function create\n     * @memberof InitialSettings\n     * @static\n     * @param {IInitialSettings=} [properties] Properties to set\n     * @returns {InitialSettings} InitialSettings instance\n     */\n\n    InitialSettings.create = function create(properties) {\n      return new InitialSettings(properties);\n    };\n    /**\n     * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n     * @function encode\n     * @memberof InitialSettings\n     * @static\n     * @param {IInitialSettings} message InitialSettings message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InitialSettings.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.userId != null && Object.hasOwnProperty.call(message, 'userId')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.userId);\n      if (message.userChannel != null && Object.hasOwnProperty.call(message, 'userChannel')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.userChannel);\n      if (message.device != null && Object.hasOwnProperty.call(message, 'device')) $root.Device.encode(message.device, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      if (message.settings != null && Object.hasOwnProperty.call(message, 'settings')) $root.Settings.encode(message.settings, writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork()).ldelim();\n      if (message.locale != null && Object.hasOwnProperty.call(message, 'locale')) writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).string(message.locale);\n      return writer;\n    };\n    /**\n     * Encodes the specified InitialSettings message, length delimited. Does not implicitly {@link InitialSettings.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof InitialSettings\n     * @static\n     * @param {IInitialSettings} message InitialSettings message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InitialSettings.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an InitialSettings message from the specified reader or buffer.\n     * @function decode\n     * @memberof InitialSettings\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {InitialSettings} InitialSettings\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InitialSettings.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.InitialSettings();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.userId = reader.string();\n            break;\n\n          case 2:\n            message.userChannel = reader.string();\n            break;\n\n          case 3:\n            message.device = $root.Device.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            message.settings = $root.Settings.decode(reader, reader.uint32());\n            break;\n\n          case 5:\n            message.locale = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an InitialSettings message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof InitialSettings\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {InitialSettings} InitialSettings\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InitialSettings.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an InitialSettings message.\n     * @function verify\n     * @memberof InitialSettings\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    InitialSettings.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.userId != null && message.hasOwnProperty('userId')) if (!$util.isString(message.userId)) return 'userId: string expected';\n      if (message.userChannel != null && message.hasOwnProperty('userChannel')) if (!$util.isString(message.userChannel)) return 'userChannel: string expected';\n\n      if (message.device != null && message.hasOwnProperty('device')) {\n        var error = $root.Device.verify(message.device);\n        if (error) return 'device.' + error;\n      }\n\n      if (message.settings != null && message.hasOwnProperty('settings')) {\n        var error = $root.Settings.verify(message.settings);\n        if (error) return 'settings.' + error;\n      }\n\n      if (message.locale != null && message.hasOwnProperty('locale')) if (!$util.isString(message.locale)) return 'locale: string expected';\n      return null;\n    };\n    /**\n     * Creates an InitialSettings message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof InitialSettings\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {InitialSettings} InitialSettings\n     */\n\n\n    InitialSettings.fromObject = function fromObject(object) {\n      if (object instanceof $root.InitialSettings) return object;\n      var message = new $root.InitialSettings();\n      if (object.userId != null) message.userId = String(object.userId);\n      if (object.userChannel != null) message.userChannel = String(object.userChannel);\n\n      if (object.device != null) {\n        if (typeof object.device !== 'object') throw TypeError('.InitialSettings.device: object expected');\n        message.device = $root.Device.fromObject(object.device);\n      }\n\n      if (object.settings != null) {\n        if (typeof object.settings !== 'object') throw TypeError('.InitialSettings.settings: object expected');\n        message.settings = $root.Settings.fromObject(object.settings);\n      }\n\n      if (object.locale != null) message.locale = String(object.locale);\n      return message;\n    };\n    /**\n     * Creates a plain object from an InitialSettings message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof InitialSettings\n     * @static\n     * @param {InitialSettings} message InitialSettings\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    InitialSettings.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.userId = '';\n        object.userChannel = '';\n        object.device = null;\n        object.settings = null;\n        object.locale = '';\n      }\n\n      if (message.userId != null && message.hasOwnProperty('userId')) object.userId = message.userId;\n      if (message.userChannel != null && message.hasOwnProperty('userChannel')) object.userChannel = message.userChannel;\n      if (message.device != null && message.hasOwnProperty('device')) object.device = $root.Device.toObject(message.device, options);\n      if (message.settings != null && message.hasOwnProperty('settings')) object.settings = $root.Settings.toObject(message.settings, options);\n      if (message.locale != null && message.hasOwnProperty('locale')) object.locale = message.locale;\n      return object;\n    };\n    /**\n     * Converts this InitialSettings to JSON.\n     * @function toJSON\n     * @memberof InitialSettings\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    InitialSettings.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return InitialSettings;\n  }();\n\n  $root.Device = function () {\n    /**\n     * Properties of a Device.\n     * @exports IDevice\n     * @interface IDevice\n     * @property {string|null} [platformType] Device platformType\n     * @property {string|null} [platformVersion] Device platformVersion\n     * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n     * @property {string|null} [surfaceVersion] Device surfaceVersion\n     * @property {string|null} [features] Device features\n     * @property {string|null} [capabilities] Device capabilities\n     * @property {string|null} [deviceId] Device deviceId\n     * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n     * @property {string|null} [deviceModel] Device deviceModel\n     * @property {string|null} [additionalInfo] Device additionalInfo\n     */\n\n    /**\n     * Constructs a new Device.\n     * @exports Device\n     * @classdesc Represents a Device.\n     * @implements IDevice\n     * @constructor\n     * @param {IDevice=} [properties] Properties to set\n     */\n    function Device(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Device platformType.\n     * @member {string} platformType\n     * @memberof Device\n     * @instance\n     */\n\n\n    Device.prototype.platformType = '';\n    /**\n     * Device platformVersion.\n     * @member {string} platformVersion\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.platformVersion = '';\n    /**\n     * Обязательно. Пример, SBERBOX\n     * @member {string} surface\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.surface = '';\n    /**\n     * Device surfaceVersion.\n     * @member {string} surfaceVersion\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.surfaceVersion = '';\n    /**\n     * Device features.\n     * @member {string} features\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.features = '';\n    /**\n     * Device capabilities.\n     * @member {string} capabilities\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.capabilities = '';\n    /**\n     * Device deviceId.\n     * @member {string} deviceId\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.deviceId = '';\n    /**\n     * Device deviceManufacturer.\n     * @member {string} deviceManufacturer\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.deviceManufacturer = '';\n    /**\n     * Device deviceModel.\n     * @member {string} deviceModel\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.deviceModel = '';\n    /**\n     * Device additionalInfo.\n     * @member {string} additionalInfo\n     * @memberof Device\n     * @instance\n     */\n\n    Device.prototype.additionalInfo = '';\n    /**\n     * Creates a new Device instance using the specified properties.\n     * @function create\n     * @memberof Device\n     * @static\n     * @param {IDevice=} [properties] Properties to set\n     * @returns {Device} Device instance\n     */\n\n    Device.create = function create(properties) {\n      return new Device(properties);\n    };\n    /**\n     * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n     * @function encode\n     * @memberof Device\n     * @static\n     * @param {IDevice} message Device message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Device.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.platformType != null && Object.hasOwnProperty.call(message, 'platformType')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.platformType);\n      if (message.platformVersion != null && Object.hasOwnProperty.call(message, 'platformVersion')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.platformVersion);\n      if (message.surface != null && Object.hasOwnProperty.call(message, 'surface')) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.surface);\n      if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, 'surfaceVersion')) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.surfaceVersion);\n      if (message.features != null && Object.hasOwnProperty.call(message, 'features')) writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).string(message.features);\n      if (message.capabilities != null && Object.hasOwnProperty.call(message, 'capabilities')) writer.uint32(\n      /* id 6, wireType 2 =*/\n      50).string(message.capabilities);\n      if (message.deviceId != null && Object.hasOwnProperty.call(message, 'deviceId')) writer.uint32(\n      /* id 7, wireType 2 =*/\n      58).string(message.deviceId);\n      if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, 'deviceManufacturer')) writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).string(message.deviceManufacturer);\n      if (message.deviceModel != null && Object.hasOwnProperty.call(message, 'deviceModel')) writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).string(message.deviceModel);\n      if (message.additionalInfo != null && Object.hasOwnProperty.call(message, 'additionalInfo')) writer.uint32(\n      /* id 10, wireType 2 =*/\n      82).string(message.additionalInfo);\n      return writer;\n    };\n    /**\n     * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Device\n     * @static\n     * @param {IDevice} message Device message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Device.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Device message from the specified reader or buffer.\n     * @function decode\n     * @memberof Device\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Device} Device\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Device.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Device();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.platformType = reader.string();\n            break;\n\n          case 2:\n            message.platformVersion = reader.string();\n            break;\n\n          case 3:\n            message.surface = reader.string();\n            break;\n\n          case 4:\n            message.surfaceVersion = reader.string();\n            break;\n\n          case 5:\n            message.features = reader.string();\n            break;\n\n          case 6:\n            message.capabilities = reader.string();\n            break;\n\n          case 7:\n            message.deviceId = reader.string();\n            break;\n\n          case 8:\n            message.deviceManufacturer = reader.string();\n            break;\n\n          case 9:\n            message.deviceModel = reader.string();\n            break;\n\n          case 10:\n            message.additionalInfo = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Device message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Device\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Device} Device\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Device.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Device message.\n     * @function verify\n     * @memberof Device\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Device.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.platformType != null && message.hasOwnProperty('platformType')) if (!$util.isString(message.platformType)) return 'platformType: string expected';\n      if (message.platformVersion != null && message.hasOwnProperty('platformVersion')) if (!$util.isString(message.platformVersion)) return 'platformVersion: string expected';\n      if (message.surface != null && message.hasOwnProperty('surface')) if (!$util.isString(message.surface)) return 'surface: string expected';\n      if (message.surfaceVersion != null && message.hasOwnProperty('surfaceVersion')) if (!$util.isString(message.surfaceVersion)) return 'surfaceVersion: string expected';\n      if (message.features != null && message.hasOwnProperty('features')) if (!$util.isString(message.features)) return 'features: string expected';\n      if (message.capabilities != null && message.hasOwnProperty('capabilities')) if (!$util.isString(message.capabilities)) return 'capabilities: string expected';\n      if (message.deviceId != null && message.hasOwnProperty('deviceId')) if (!$util.isString(message.deviceId)) return 'deviceId: string expected';\n      if (message.deviceManufacturer != null && message.hasOwnProperty('deviceManufacturer')) if (!$util.isString(message.deviceManufacturer)) return 'deviceManufacturer: string expected';\n      if (message.deviceModel != null && message.hasOwnProperty('deviceModel')) if (!$util.isString(message.deviceModel)) return 'deviceModel: string expected';\n      if (message.additionalInfo != null && message.hasOwnProperty('additionalInfo')) if (!$util.isString(message.additionalInfo)) return 'additionalInfo: string expected';\n      return null;\n    };\n    /**\n     * Creates a Device message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Device\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Device} Device\n     */\n\n\n    Device.fromObject = function fromObject(object) {\n      if (object instanceof $root.Device) return object;\n      var message = new $root.Device();\n      if (object.platformType != null) message.platformType = String(object.platformType);\n      if (object.platformVersion != null) message.platformVersion = String(object.platformVersion);\n      if (object.surface != null) message.surface = String(object.surface);\n      if (object.surfaceVersion != null) message.surfaceVersion = String(object.surfaceVersion);\n      if (object.features != null) message.features = String(object.features);\n      if (object.capabilities != null) message.capabilities = String(object.capabilities);\n      if (object.deviceId != null) message.deviceId = String(object.deviceId);\n      if (object.deviceManufacturer != null) message.deviceManufacturer = String(object.deviceManufacturer);\n      if (object.deviceModel != null) message.deviceModel = String(object.deviceModel);\n      if (object.additionalInfo != null) message.additionalInfo = String(object.additionalInfo);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Device message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Device\n     * @static\n     * @param {Device} message Device\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Device.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.platformType = '';\n        object.platformVersion = '';\n        object.surface = '';\n        object.surfaceVersion = '';\n        object.features = '';\n        object.capabilities = '';\n        object.deviceId = '';\n        object.deviceManufacturer = '';\n        object.deviceModel = '';\n        object.additionalInfo = '';\n      }\n\n      if (message.platformType != null && message.hasOwnProperty('platformType')) object.platformType = message.platformType;\n      if (message.platformVersion != null && message.hasOwnProperty('platformVersion')) object.platformVersion = message.platformVersion;\n      if (message.surface != null && message.hasOwnProperty('surface')) object.surface = message.surface;\n      if (message.surfaceVersion != null && message.hasOwnProperty('surfaceVersion')) object.surfaceVersion = message.surfaceVersion;\n      if (message.features != null && message.hasOwnProperty('features')) object.features = message.features;\n      if (message.capabilities != null && message.hasOwnProperty('capabilities')) object.capabilities = message.capabilities;\n      if (message.deviceId != null && message.hasOwnProperty('deviceId')) object.deviceId = message.deviceId;\n      if (message.deviceManufacturer != null && message.hasOwnProperty('deviceManufacturer')) object.deviceManufacturer = message.deviceManufacturer;\n      if (message.deviceModel != null && message.hasOwnProperty('deviceModel')) object.deviceModel = message.deviceModel;\n      if (message.additionalInfo != null && message.hasOwnProperty('additionalInfo')) object.additionalInfo = message.additionalInfo;\n      return object;\n    };\n    /**\n     * Converts this Device to JSON.\n     * @function toJSON\n     * @memberof Device\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Device.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Device;\n  }();\n\n  $root.Settings = function () {\n    /**\n     * Properties of a Settings.\n     * @exports ISettings\n     * @interface ISettings\n     * @property {number|null} [dubbing] Settings dubbing\n     * @property {number|null} [echo] Settings echo\n     * @property {string|null} [ttsEngine] Settings ttsEngine\n     * @property {string|null} [asrEngine] Settings asrEngine\n     * @property {number|null} [asrAutoStop] Settings asrAutoStop\n     * @property {number|null} [devMode] Settings devMode\n     * @property {string|null} [authConnector] Settings authConnector\n     * @property {string|null} [surface] Settings surface\n     */\n\n    /**\n     * Constructs a new Settings.\n     * @exports Settings\n     * @classdesc Represents a Settings.\n     * @implements ISettings\n     * @constructor\n     * @param {ISettings=} [properties] Properties to set\n     */\n    function Settings(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Settings dubbing.\n     * @member {number} dubbing\n     * @memberof Settings\n     * @instance\n     */\n\n\n    Settings.prototype.dubbing = 0;\n    /**\n     * Settings echo.\n     * @member {number} echo\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.echo = 0;\n    /**\n     * Settings ttsEngine.\n     * @member {string} ttsEngine\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.ttsEngine = '';\n    /**\n     * Settings asrEngine.\n     * @member {string} asrEngine\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.asrEngine = '';\n    /**\n     * Settings asrAutoStop.\n     * @member {number} asrAutoStop\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.asrAutoStop = 0;\n    /**\n     * Settings devMode.\n     * @member {number} devMode\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.devMode = 0;\n    /**\n     * Settings authConnector.\n     * @member {string} authConnector\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.authConnector = '';\n    /**\n     * Settings surface.\n     * @member {string} surface\n     * @memberof Settings\n     * @instance\n     */\n\n    Settings.prototype.surface = '';\n    /**\n     * Creates a new Settings instance using the specified properties.\n     * @function create\n     * @memberof Settings\n     * @static\n     * @param {ISettings=} [properties] Properties to set\n     * @returns {Settings} Settings instance\n     */\n\n    Settings.create = function create(properties) {\n      return new Settings(properties);\n    };\n    /**\n     * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n     * @function encode\n     * @memberof Settings\n     * @static\n     * @param {ISettings} message Settings message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Settings.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.dubbing != null && Object.hasOwnProperty.call(message, 'dubbing')) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.dubbing);\n      if (message.echo != null && Object.hasOwnProperty.call(message, 'echo')) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int32(message.echo);\n      if (message.ttsEngine != null && Object.hasOwnProperty.call(message, 'ttsEngine')) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.ttsEngine);\n      if (message.asrEngine != null && Object.hasOwnProperty.call(message, 'asrEngine')) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.asrEngine);\n      if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, 'asrAutoStop')) writer.uint32(\n      /* id 5, wireType 0 =*/\n      40).int32(message.asrAutoStop);\n      if (message.devMode != null && Object.hasOwnProperty.call(message, 'devMode')) writer.uint32(\n      /* id 6, wireType 0 =*/\n      48).int32(message.devMode);\n      if (message.authConnector != null && Object.hasOwnProperty.call(message, 'authConnector')) writer.uint32(\n      /* id 7, wireType 2 =*/\n      58).string(message.authConnector);\n      if (message.surface != null && Object.hasOwnProperty.call(message, 'surface')) writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).string(message.surface);\n      return writer;\n    };\n    /**\n     * Encodes the specified Settings message, length delimited. Does not implicitly {@link Settings.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Settings\n     * @static\n     * @param {ISettings} message Settings message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Settings.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Settings message from the specified reader or buffer.\n     * @function decode\n     * @memberof Settings\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Settings} Settings\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Settings.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Settings();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.dubbing = reader.int32();\n            break;\n\n          case 2:\n            message.echo = reader.int32();\n            break;\n\n          case 3:\n            message.ttsEngine = reader.string();\n            break;\n\n          case 4:\n            message.asrEngine = reader.string();\n            break;\n\n          case 5:\n            message.asrAutoStop = reader.int32();\n            break;\n\n          case 6:\n            message.devMode = reader.int32();\n            break;\n\n          case 7:\n            message.authConnector = reader.string();\n            break;\n\n          case 8:\n            message.surface = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Settings message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Settings\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Settings} Settings\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Settings.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Settings message.\n     * @function verify\n     * @memberof Settings\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Settings.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.dubbing != null && message.hasOwnProperty('dubbing')) if (!$util.isInteger(message.dubbing)) return 'dubbing: integer expected';\n      if (message.echo != null && message.hasOwnProperty('echo')) if (!$util.isInteger(message.echo)) return 'echo: integer expected';\n      if (message.ttsEngine != null && message.hasOwnProperty('ttsEngine')) if (!$util.isString(message.ttsEngine)) return 'ttsEngine: string expected';\n      if (message.asrEngine != null && message.hasOwnProperty('asrEngine')) if (!$util.isString(message.asrEngine)) return 'asrEngine: string expected';\n      if (message.asrAutoStop != null && message.hasOwnProperty('asrAutoStop')) if (!$util.isInteger(message.asrAutoStop)) return 'asrAutoStop: integer expected';\n      if (message.devMode != null && message.hasOwnProperty('devMode')) if (!$util.isInteger(message.devMode)) return 'devMode: integer expected';\n      if (message.authConnector != null && message.hasOwnProperty('authConnector')) if (!$util.isString(message.authConnector)) return 'authConnector: string expected';\n      if (message.surface != null && message.hasOwnProperty('surface')) if (!$util.isString(message.surface)) return 'surface: string expected';\n      return null;\n    };\n    /**\n     * Creates a Settings message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Settings\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Settings} Settings\n     */\n\n\n    Settings.fromObject = function fromObject(object) {\n      if (object instanceof $root.Settings) return object;\n      var message = new $root.Settings();\n      if (object.dubbing != null) message.dubbing = object.dubbing | 0;\n      if (object.echo != null) message.echo = object.echo | 0;\n      if (object.ttsEngine != null) message.ttsEngine = String(object.ttsEngine);\n      if (object.asrEngine != null) message.asrEngine = String(object.asrEngine);\n      if (object.asrAutoStop != null) message.asrAutoStop = object.asrAutoStop | 0;\n      if (object.devMode != null) message.devMode = object.devMode | 0;\n      if (object.authConnector != null) message.authConnector = String(object.authConnector);\n      if (object.surface != null) message.surface = String(object.surface);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Settings message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Settings\n     * @static\n     * @param {Settings} message Settings\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Settings.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.dubbing = 0;\n        object.echo = 0;\n        object.ttsEngine = '';\n        object.asrEngine = '';\n        object.asrAutoStop = 0;\n        object.devMode = 0;\n        object.authConnector = '';\n        object.surface = '';\n      }\n\n      if (message.dubbing != null && message.hasOwnProperty('dubbing')) object.dubbing = message.dubbing;\n      if (message.echo != null && message.hasOwnProperty('echo')) object.echo = message.echo;\n      if (message.ttsEngine != null && message.hasOwnProperty('ttsEngine')) object.ttsEngine = message.ttsEngine;\n      if (message.asrEngine != null && message.hasOwnProperty('asrEngine')) object.asrEngine = message.asrEngine;\n      if (message.asrAutoStop != null && message.hasOwnProperty('asrAutoStop')) object.asrAutoStop = message.asrAutoStop;\n      if (message.devMode != null && message.hasOwnProperty('devMode')) object.devMode = message.devMode;\n      if (message.authConnector != null && message.hasOwnProperty('authConnector')) object.authConnector = message.authConnector;\n      if (message.surface != null && message.hasOwnProperty('surface')) object.surface = message.surface;\n      return object;\n    };\n    /**\n     * Converts this Settings to JSON.\n     * @function toJSON\n     * @memberof Settings\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Settings.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Settings;\n  }();\n\n  $root.LegacyDevice = function () {\n    /**\n     * Properties of a LegacyDevice.\n     * @exports ILegacyDevice\n     * @interface ILegacyDevice\n     * @property {string|null} [clientType] LegacyDevice clientType\n     * @property {string|null} [channel] LegacyDevice channel\n     * @property {string|null} [channelVersion] LegacyDevice channelVersion\n     * @property {string|null} [platformName] LegacyDevice platformName\n     * @property {string|null} [platformVersion] LegacyDevice platformVersion\n     * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n     * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n     */\n\n    /**\n     * Constructs a new LegacyDevice.\n     * @exports LegacyDevice\n     * @classdesc Represents a LegacyDevice.\n     * @implements ILegacyDevice\n     * @constructor\n     * @param {ILegacyDevice=} [properties] Properties to set\n     */\n    function LegacyDevice(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * LegacyDevice clientType.\n     * @member {string} clientType\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n\n    LegacyDevice.prototype.clientType = '';\n    /**\n     * LegacyDevice channel.\n     * @member {string} channel\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.channel = '';\n    /**\n     * LegacyDevice channelVersion.\n     * @member {string} channelVersion\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.channelVersion = '';\n    /**\n     * LegacyDevice platformName.\n     * @member {string} platformName\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.platformName = '';\n    /**\n     * LegacyDevice platformVersion.\n     * @member {string} platformVersion\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.platformVersion = '';\n    /**\n     * LegacyDevice sdkVersion.\n     * @member {string} sdkVersion\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.sdkVersion = '';\n    /**\n     * LegacyDevice protocolVersion.\n     * @member {string} protocolVersion\n     * @memberof LegacyDevice\n     * @instance\n     */\n\n    LegacyDevice.prototype.protocolVersion = '';\n    /**\n     * Creates a new LegacyDevice instance using the specified properties.\n     * @function create\n     * @memberof LegacyDevice\n     * @static\n     * @param {ILegacyDevice=} [properties] Properties to set\n     * @returns {LegacyDevice} LegacyDevice instance\n     */\n\n    LegacyDevice.create = function create(properties) {\n      return new LegacyDevice(properties);\n    };\n    /**\n     * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n     * @function encode\n     * @memberof LegacyDevice\n     * @static\n     * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    LegacyDevice.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.clientType != null && Object.hasOwnProperty.call(message, 'clientType')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.clientType);\n      if (message.channel != null && Object.hasOwnProperty.call(message, 'channel')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.channel);\n      if (message.channelVersion != null && Object.hasOwnProperty.call(message, 'channelVersion')) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.channelVersion);\n      if (message.platformName != null && Object.hasOwnProperty.call(message, 'platformName')) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.platformName);\n      if (message.platformVersion != null && Object.hasOwnProperty.call(message, 'platformVersion')) writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).string(message.platformVersion);\n      if (message.sdkVersion != null && Object.hasOwnProperty.call(message, 'sdkVersion')) writer.uint32(\n      /* id 6, wireType 2 =*/\n      50).string(message.sdkVersion);\n      if (message.protocolVersion != null && Object.hasOwnProperty.call(message, 'protocolVersion')) writer.uint32(\n      /* id 7, wireType 2 =*/\n      58).string(message.protocolVersion);\n      return writer;\n    };\n    /**\n     * Encodes the specified LegacyDevice message, length delimited. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LegacyDevice\n     * @static\n     * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    LegacyDevice.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a LegacyDevice message from the specified reader or buffer.\n     * @function decode\n     * @memberof LegacyDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LegacyDevice} LegacyDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    LegacyDevice.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.LegacyDevice();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.clientType = reader.string();\n            break;\n\n          case 2:\n            message.channel = reader.string();\n            break;\n\n          case 3:\n            message.channelVersion = reader.string();\n            break;\n\n          case 4:\n            message.platformName = reader.string();\n            break;\n\n          case 5:\n            message.platformVersion = reader.string();\n            break;\n\n          case 6:\n            message.sdkVersion = reader.string();\n            break;\n\n          case 7:\n            message.protocolVersion = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a LegacyDevice message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LegacyDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LegacyDevice} LegacyDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    LegacyDevice.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a LegacyDevice message.\n     * @function verify\n     * @memberof LegacyDevice\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    LegacyDevice.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.clientType != null && message.hasOwnProperty('clientType')) if (!$util.isString(message.clientType)) return 'clientType: string expected';\n      if (message.channel != null && message.hasOwnProperty('channel')) if (!$util.isString(message.channel)) return 'channel: string expected';\n      if (message.channelVersion != null && message.hasOwnProperty('channelVersion')) if (!$util.isString(message.channelVersion)) return 'channelVersion: string expected';\n      if (message.platformName != null && message.hasOwnProperty('platformName')) if (!$util.isString(message.platformName)) return 'platformName: string expected';\n      if (message.platformVersion != null && message.hasOwnProperty('platformVersion')) if (!$util.isString(message.platformVersion)) return 'platformVersion: string expected';\n      if (message.sdkVersion != null && message.hasOwnProperty('sdkVersion')) if (!$util.isString(message.sdkVersion)) return 'sdkVersion: string expected';\n      if (message.protocolVersion != null && message.hasOwnProperty('protocolVersion')) if (!$util.isString(message.protocolVersion)) return 'protocolVersion: string expected';\n      return null;\n    };\n    /**\n     * Creates a LegacyDevice message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LegacyDevice\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LegacyDevice} LegacyDevice\n     */\n\n\n    LegacyDevice.fromObject = function fromObject(object) {\n      if (object instanceof $root.LegacyDevice) return object;\n      var message = new $root.LegacyDevice();\n      if (object.clientType != null) message.clientType = String(object.clientType);\n      if (object.channel != null) message.channel = String(object.channel);\n      if (object.channelVersion != null) message.channelVersion = String(object.channelVersion);\n      if (object.platformName != null) message.platformName = String(object.platformName);\n      if (object.platformVersion != null) message.platformVersion = String(object.platformVersion);\n      if (object.sdkVersion != null) message.sdkVersion = String(object.sdkVersion);\n      if (object.protocolVersion != null) message.protocolVersion = String(object.protocolVersion);\n      return message;\n    };\n    /**\n     * Creates a plain object from a LegacyDevice message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LegacyDevice\n     * @static\n     * @param {LegacyDevice} message LegacyDevice\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    LegacyDevice.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.clientType = '';\n        object.channel = '';\n        object.channelVersion = '';\n        object.platformName = '';\n        object.platformVersion = '';\n        object.sdkVersion = '';\n        object.protocolVersion = '';\n      }\n\n      if (message.clientType != null && message.hasOwnProperty('clientType')) object.clientType = message.clientType;\n      if (message.channel != null && message.hasOwnProperty('channel')) object.channel = message.channel;\n      if (message.channelVersion != null && message.hasOwnProperty('channelVersion')) object.channelVersion = message.channelVersion;\n      if (message.platformName != null && message.hasOwnProperty('platformName')) object.platformName = message.platformName;\n      if (message.platformVersion != null && message.hasOwnProperty('platformVersion')) object.platformVersion = message.platformVersion;\n      if (message.sdkVersion != null && message.hasOwnProperty('sdkVersion')) object.sdkVersion = message.sdkVersion;\n      if (message.protocolVersion != null && message.hasOwnProperty('protocolVersion')) object.protocolVersion = message.protocolVersion;\n      return object;\n    };\n    /**\n     * Converts this LegacyDevice to JSON.\n     * @function toJSON\n     * @memberof LegacyDevice\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    LegacyDevice.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LegacyDevice;\n  }();\n\n  $root.Voice = function () {\n    /**\n     * Properties of a Voice.\n     * @exports IVoice\n     * @interface IVoice\n     * @property {Uint8Array|null} [data] Voice data\n     */\n\n    /**\n     * Constructs a new Voice.\n     * @exports Voice\n     * @classdesc Represents a Voice.\n     * @implements IVoice\n     * @constructor\n     * @param {IVoice=} [properties] Properties to set\n     */\n    function Voice(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Voice data.\n     * @member {Uint8Array} data\n     * @memberof Voice\n     * @instance\n     */\n\n\n    Voice.prototype.data = $util.newBuffer([]);\n    /**\n     * Creates a new Voice instance using the specified properties.\n     * @function create\n     * @memberof Voice\n     * @static\n     * @param {IVoice=} [properties] Properties to set\n     * @returns {Voice} Voice instance\n     */\n\n    Voice.create = function create(properties) {\n      return new Voice(properties);\n    };\n    /**\n     * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n     * @function encode\n     * @memberof Voice\n     * @static\n     * @param {IVoice} message Voice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Voice.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.data != null && Object.hasOwnProperty.call(message, 'data')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.data);\n      return writer;\n    };\n    /**\n     * Encodes the specified Voice message, length delimited. Does not implicitly {@link Voice.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Voice\n     * @static\n     * @param {IVoice} message Voice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Voice.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Voice message from the specified reader or buffer.\n     * @function decode\n     * @memberof Voice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Voice} Voice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Voice.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Voice();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.data = reader.bytes();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Voice message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Voice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Voice} Voice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Voice.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Voice message.\n     * @function verify\n     * @memberof Voice\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Voice.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.data != null && message.hasOwnProperty('data')) if (!(message.data && typeof message.data.length === 'number' || $util.isString(message.data))) return 'data: buffer expected';\n      return null;\n    };\n    /**\n     * Creates a Voice message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Voice\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Voice} Voice\n     */\n\n\n    Voice.fromObject = function fromObject(object) {\n      if (object instanceof $root.Voice) return object;\n      var message = new $root.Voice();\n      if (object.data != null) if (typeof object.data === 'string') $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;\n      return message;\n    };\n    /**\n     * Creates a plain object from a Voice message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Voice\n     * @static\n     * @param {Voice} message Voice\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Voice.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) if (options.bytes === String) object.data = '';else {\n        object.data = [];\n        if (options.bytes !== Array) object.data = $util.newBuffer(object.data);\n      }\n      if (message.data != null && message.hasOwnProperty('data')) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n      return object;\n    };\n    /**\n     * Converts this Voice to JSON.\n     * @function toJSON\n     * @memberof Voice\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Voice.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Voice;\n  }();\n\n  $root.Text = function () {\n    /**\n     * Properties of a Text.\n     * @exports IText\n     * @interface IText\n     * @property {string|null} [data] Text data\n     * @property {string|null} [type] Text type\n     */\n\n    /**\n     * Constructs a new Text.\n     * @exports Text\n     * @classdesc Represents a Text.\n     * @implements IText\n     * @constructor\n     * @param {IText=} [properties] Properties to set\n     */\n    function Text(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Text data.\n     * @member {string} data\n     * @memberof Text\n     * @instance\n     */\n\n\n    Text.prototype.data = '';\n    /**\n     * Text type.\n     * @member {string} type\n     * @memberof Text\n     * @instance\n     */\n\n    Text.prototype.type = '';\n    /**\n     * Creates a new Text instance using the specified properties.\n     * @function create\n     * @memberof Text\n     * @static\n     * @param {IText=} [properties] Properties to set\n     * @returns {Text} Text instance\n     */\n\n    Text.create = function create(properties) {\n      return new Text(properties);\n    };\n    /**\n     * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n     * @function encode\n     * @memberof Text\n     * @static\n     * @param {IText} message Text message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Text.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.data != null && Object.hasOwnProperty.call(message, 'data')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.data);\n      if (message.type != null && Object.hasOwnProperty.call(message, 'type')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.type);\n      return writer;\n    };\n    /**\n     * Encodes the specified Text message, length delimited. Does not implicitly {@link Text.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Text\n     * @static\n     * @param {IText} message Text message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Text.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Text message from the specified reader or buffer.\n     * @function decode\n     * @memberof Text\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Text} Text\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Text.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Text();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.data = reader.string();\n            break;\n\n          case 2:\n            message.type = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Text message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Text\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Text} Text\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Text.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Text message.\n     * @function verify\n     * @memberof Text\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Text.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.data != null && message.hasOwnProperty('data')) if (!$util.isString(message.data)) return 'data: string expected';\n      if (message.type != null && message.hasOwnProperty('type')) if (!$util.isString(message.type)) return 'type: string expected';\n      return null;\n    };\n    /**\n     * Creates a Text message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Text\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Text} Text\n     */\n\n\n    Text.fromObject = function fromObject(object) {\n      if (object instanceof $root.Text) return object;\n      var message = new $root.Text();\n      if (object.data != null) message.data = String(object.data);\n      if (object.type != null) message.type = String(object.type);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Text message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Text\n     * @static\n     * @param {Text} message Text\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Text.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.data = '';\n        object.type = '';\n      }\n\n      if (message.data != null && message.hasOwnProperty('data')) object.data = message.data;\n      if (message.type != null && message.hasOwnProperty('type')) object.type = message.type;\n      return object;\n    };\n    /**\n     * Converts this Text to JSON.\n     * @function toJSON\n     * @memberof Text\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Text.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Text;\n  }();\n\n  $root.SystemMessage = function () {\n    /**\n     * Properties of a SystemMessage.\n     * @exports ISystemMessage\n     * @interface ISystemMessage\n     * @property {string|null} [data] SystemMessage data\n     */\n\n    /**\n     * Constructs a new SystemMessage.\n     * @exports SystemMessage\n     * @classdesc Represents a SystemMessage.\n     * @implements ISystemMessage\n     * @constructor\n     * @param {ISystemMessage=} [properties] Properties to set\n     */\n    function SystemMessage(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SystemMessage data.\n     * @member {string} data\n     * @memberof SystemMessage\n     * @instance\n     */\n\n\n    SystemMessage.prototype.data = '';\n    /**\n     * Creates a new SystemMessage instance using the specified properties.\n     * @function create\n     * @memberof SystemMessage\n     * @static\n     * @param {ISystemMessage=} [properties] Properties to set\n     * @returns {SystemMessage} SystemMessage instance\n     */\n\n    SystemMessage.create = function create(properties) {\n      return new SystemMessage(properties);\n    };\n    /**\n     * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n     * @function encode\n     * @memberof SystemMessage\n     * @static\n     * @param {ISystemMessage} message SystemMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    SystemMessage.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.data != null && Object.hasOwnProperty.call(message, 'data')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.data);\n      return writer;\n    };\n    /**\n     * Encodes the specified SystemMessage message, length delimited. Does not implicitly {@link SystemMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SystemMessage\n     * @static\n     * @param {ISystemMessage} message SystemMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    SystemMessage.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a SystemMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof SystemMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SystemMessage} SystemMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    SystemMessage.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.SystemMessage();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.data = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a SystemMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SystemMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SystemMessage} SystemMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    SystemMessage.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a SystemMessage message.\n     * @function verify\n     * @memberof SystemMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    SystemMessage.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.data != null && message.hasOwnProperty('data')) if (!$util.isString(message.data)) return 'data: string expected';\n      return null;\n    };\n    /**\n     * Creates a SystemMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SystemMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SystemMessage} SystemMessage\n     */\n\n\n    SystemMessage.fromObject = function fromObject(object) {\n      if (object instanceof $root.SystemMessage) return object;\n      var message = new $root.SystemMessage();\n      if (object.data != null) message.data = String(object.data);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SystemMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SystemMessage\n     * @static\n     * @param {SystemMessage} message SystemMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SystemMessage.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) object.data = '';\n      if (message.data != null && message.hasOwnProperty('data')) object.data = message.data;\n      return object;\n    };\n    /**\n     * Converts this SystemMessage to JSON.\n     * @function toJSON\n     * @memberof SystemMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SystemMessage.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SystemMessage;\n  }();\n\n  $root.Status = function () {\n    /**\n     * Properties of a Status.\n     * @exports IStatus\n     * @interface IStatus\n     * @property {number|null} [code] Status code\n     * @property {string|null} [description] Status description\n     * @property {string|null} [technicalDescription] Status technicalDescription\n     */\n\n    /**\n     * Constructs a new Status.\n     * @exports Status\n     * @classdesc Represents a Status.\n     * @implements IStatus\n     * @constructor\n     * @param {IStatus=} [properties] Properties to set\n     */\n    function Status(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Status code.\n     * @member {number} code\n     * @memberof Status\n     * @instance\n     */\n\n\n    Status.prototype.code = 0;\n    /**\n     * Status description.\n     * @member {string} description\n     * @memberof Status\n     * @instance\n     */\n\n    Status.prototype.description = '';\n    /**\n     * Status technicalDescription.\n     * @member {string} technicalDescription\n     * @memberof Status\n     * @instance\n     */\n\n    Status.prototype.technicalDescription = '';\n    /**\n     * Creates a new Status instance using the specified properties.\n     * @function create\n     * @memberof Status\n     * @static\n     * @param {IStatus=} [properties] Properties to set\n     * @returns {Status} Status instance\n     */\n\n    Status.create = function create(properties) {\n      return new Status(properties);\n    };\n    /**\n     * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n     * @function encode\n     * @memberof Status\n     * @static\n     * @param {IStatus} message Status message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Status.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.code != null && Object.hasOwnProperty.call(message, 'code')) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.code);\n      if (message.description != null && Object.hasOwnProperty.call(message, 'description')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.description);\n      if (message.technicalDescription != null && Object.hasOwnProperty.call(message, 'technicalDescription')) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.technicalDescription);\n      return writer;\n    };\n    /**\n     * Encodes the specified Status message, length delimited. Does not implicitly {@link Status.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Status\n     * @static\n     * @param {IStatus} message Status message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Status.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Status message from the specified reader or buffer.\n     * @function decode\n     * @memberof Status\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Status} Status\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Status.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Status();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.code = reader.int32();\n            break;\n\n          case 2:\n            message.description = reader.string();\n            break;\n\n          case 3:\n            message.technicalDescription = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Status message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Status\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Status} Status\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Status.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Status message.\n     * @function verify\n     * @memberof Status\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Status.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.code != null && message.hasOwnProperty('code')) if (!$util.isInteger(message.code)) return 'code: integer expected';\n      if (message.description != null && message.hasOwnProperty('description')) if (!$util.isString(message.description)) return 'description: string expected';\n      if (message.technicalDescription != null && message.hasOwnProperty('technicalDescription')) if (!$util.isString(message.technicalDescription)) return 'technicalDescription: string expected';\n      return null;\n    };\n    /**\n     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Status\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Status} Status\n     */\n\n\n    Status.fromObject = function fromObject(object) {\n      if (object instanceof $root.Status) return object;\n      var message = new $root.Status();\n      if (object.code != null) message.code = object.code | 0;\n      if (object.description != null) message.description = String(object.description);\n      if (object.technicalDescription != null) message.technicalDescription = String(object.technicalDescription);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Status message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Status\n     * @static\n     * @param {Status} message Status\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Status.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.code = 0;\n        object.description = '';\n        object.technicalDescription = '';\n      }\n\n      if (message.code != null && message.hasOwnProperty('code')) object.code = message.code;\n      if (message.description != null && message.hasOwnProperty('description')) object.description = message.description;\n      if (message.technicalDescription != null && message.hasOwnProperty('technicalDescription')) object.technicalDescription = message.technicalDescription;\n      return object;\n    };\n    /**\n     * Converts this Status to JSON.\n     * @function toJSON\n     * @memberof Status\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Status.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Status;\n  }();\n\n  $root.Bytes = function () {\n    /**\n     * Properties of a Bytes.\n     * @exports IBytes\n     * @interface IBytes\n     * @property {Uint8Array|null} [data] Bytes data\n     * @property {string|null} [desc] Bytes desc\n     */\n\n    /**\n     * Constructs a new Bytes.\n     * @exports Bytes\n     * @classdesc Represents a Bytes.\n     * @implements IBytes\n     * @constructor\n     * @param {IBytes=} [properties] Properties to set\n     */\n    function Bytes(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Bytes data.\n     * @member {Uint8Array} data\n     * @memberof Bytes\n     * @instance\n     */\n\n\n    Bytes.prototype.data = $util.newBuffer([]);\n    /**\n     * Bytes desc.\n     * @member {string} desc\n     * @memberof Bytes\n     * @instance\n     */\n\n    Bytes.prototype.desc = '';\n    /**\n     * Creates a new Bytes instance using the specified properties.\n     * @function create\n     * @memberof Bytes\n     * @static\n     * @param {IBytes=} [properties] Properties to set\n     * @returns {Bytes} Bytes instance\n     */\n\n    Bytes.create = function create(properties) {\n      return new Bytes(properties);\n    };\n    /**\n     * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n     * @function encode\n     * @memberof Bytes\n     * @static\n     * @param {IBytes} message Bytes message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Bytes.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.data != null && Object.hasOwnProperty.call(message, 'data')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.data);\n      if (message.desc != null && Object.hasOwnProperty.call(message, 'desc')) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.desc);\n      return writer;\n    };\n    /**\n     * Encodes the specified Bytes message, length delimited. Does not implicitly {@link Bytes.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Bytes\n     * @static\n     * @param {IBytes} message Bytes message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Bytes.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Bytes message from the specified reader or buffer.\n     * @function decode\n     * @memberof Bytes\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Bytes} Bytes\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Bytes.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Bytes();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.data = reader.bytes();\n            break;\n\n          case 2:\n            message.desc = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Bytes message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Bytes\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Bytes} Bytes\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Bytes.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Bytes message.\n     * @function verify\n     * @memberof Bytes\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Bytes.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.data != null && message.hasOwnProperty('data')) if (!(message.data && typeof message.data.length === 'number' || $util.isString(message.data))) return 'data: buffer expected';\n      if (message.desc != null && message.hasOwnProperty('desc')) if (!$util.isString(message.desc)) return 'desc: string expected';\n      return null;\n    };\n    /**\n     * Creates a Bytes message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Bytes\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Bytes} Bytes\n     */\n\n\n    Bytes.fromObject = function fromObject(object) {\n      if (object instanceof $root.Bytes) return object;\n      var message = new $root.Bytes();\n      if (object.data != null) if (typeof object.data === 'string') $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;\n      if (object.desc != null) message.desc = String(object.desc);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Bytes message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Bytes\n     * @static\n     * @param {Bytes} message Bytes\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Bytes.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        if (options.bytes === String) object.data = '';else {\n          object.data = [];\n          if (options.bytes !== Array) object.data = $util.newBuffer(object.data);\n        }\n        object.desc = '';\n      }\n\n      if (message.data != null && message.hasOwnProperty('data')) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n      if (message.desc != null && message.hasOwnProperty('desc')) object.desc = message.desc;\n      return object;\n    };\n    /**\n     * Converts this Bytes to JSON.\n     * @function toJSON\n     * @memberof Bytes\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Bytes.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Bytes;\n  }();\n\n  $root.DevContext = function () {\n    /**\n     * Properties of a DevContext.\n     * @exports IDevContext\n     * @interface IDevContext\n     * @property {string|null} [name] DevContext name\n     * @property {number|Long|null} [timestampMs] DevContext timestampMs\n     * @property {string|null} [data] DevContext data\n     */\n\n    /**\n     * Constructs a new DevContext.\n     * @exports DevContext\n     * @classdesc Represents a DevContext.\n     * @implements IDevContext\n     * @constructor\n     * @param {IDevContext=} [properties] Properties to set\n     */\n    function DevContext(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * DevContext name.\n     * @member {string} name\n     * @memberof DevContext\n     * @instance\n     */\n\n\n    DevContext.prototype.name = '';\n    /**\n     * DevContext timestampMs.\n     * @member {number|Long} timestampMs\n     * @memberof DevContext\n     * @instance\n     */\n\n    DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * DevContext data.\n     * @member {string} data\n     * @memberof DevContext\n     * @instance\n     */\n\n    DevContext.prototype.data = '';\n    /**\n     * Creates a new DevContext instance using the specified properties.\n     * @function create\n     * @memberof DevContext\n     * @static\n     * @param {IDevContext=} [properties] Properties to set\n     * @returns {DevContext} DevContext instance\n     */\n\n    DevContext.create = function create(properties) {\n      return new DevContext(properties);\n    };\n    /**\n     * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n     * @function encode\n     * @memberof DevContext\n     * @static\n     * @param {IDevContext} message DevContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    DevContext.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.name != null && Object.hasOwnProperty.call(message, 'name')) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.name);\n      if (message.timestampMs != null && Object.hasOwnProperty.call(message, 'timestampMs')) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int64(message.timestampMs);\n      if (message.data != null && Object.hasOwnProperty.call(message, 'data')) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.data);\n      return writer;\n    };\n    /**\n     * Encodes the specified DevContext message, length delimited. Does not implicitly {@link DevContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DevContext\n     * @static\n     * @param {IDevContext} message DevContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    DevContext.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a DevContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof DevContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DevContext} DevContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    DevContext.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DevContext();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.name = reader.string();\n            break;\n\n          case 2:\n            message.timestampMs = reader.int64();\n            break;\n\n          case 3:\n            message.data = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a DevContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DevContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DevContext} DevContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    DevContext.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a DevContext message.\n     * @function verify\n     * @memberof DevContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    DevContext.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null) return 'object expected';\n      if (message.name != null && message.hasOwnProperty('name')) if (!$util.isString(message.name)) return 'name: string expected';\n      if (message.timestampMs != null && message.hasOwnProperty('timestampMs')) if (!$util.isInteger(message.timestampMs) && !(message.timestampMs && $util.isInteger(message.timestampMs.low) && $util.isInteger(message.timestampMs.high))) return 'timestampMs: integer|Long expected';\n      if (message.data != null && message.hasOwnProperty('data')) if (!$util.isString(message.data)) return 'data: string expected';\n      return null;\n    };\n    /**\n     * Creates a DevContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DevContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DevContext} DevContext\n     */\n\n\n    DevContext.fromObject = function fromObject(object) {\n      if (object instanceof $root.DevContext) return object;\n      var message = new $root.DevContext();\n      if (object.name != null) message.name = String(object.name);\n      if (object.timestampMs != null) if ($util.Long) (message.timestampMs = $util.Long.fromValue(object.timestampMs)).unsigned = false;else if (typeof object.timestampMs === 'string') message.timestampMs = parseInt(object.timestampMs, 10);else if (typeof object.timestampMs === 'number') message.timestampMs = object.timestampMs;else if (typeof object.timestampMs === 'object') message.timestampMs = new $util.LongBits(object.timestampMs.low >>> 0, object.timestampMs.high >>> 0).toNumber();\n      if (object.data != null) message.data = String(object.data);\n      return message;\n    };\n    /**\n     * Creates a plain object from a DevContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DevContext\n     * @static\n     * @param {DevContext} message DevContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    DevContext.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.name = '';\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.timestampMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.timestampMs = options.longs === String ? '0' : 0;\n\n        object.data = '';\n      }\n\n      if (message.name != null && message.hasOwnProperty('name')) object.name = message.name;\n      if (message.timestampMs != null && message.hasOwnProperty('timestampMs')) if (typeof message.timestampMs === 'number') object.timestampMs = options.longs === String ? String(message.timestampMs) : message.timestampMs;else object.timestampMs = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMs) : options.longs === Number ? new $util.LongBits(message.timestampMs.low >>> 0, message.timestampMs.high >>> 0).toNumber() : message.timestampMs;\n      if (message.data != null && message.hasOwnProperty('data')) object.data = message.data;\n      return object;\n    };\n    /**\n     * Converts this DevContext to JSON.\n     * @function toJSON\n     * @memberof DevContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    DevContext.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DevContext;\n  }();\n\n  return $root;\n});","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/node_modules/@sberdevices/assistant-client/dist/proto.js"],"names":["global","factory","define","amd","require","module","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Message","properties","devContext","keys","Object","i","length","prototype","userId","messageId","Long","fromBits","last","token","userChannel","vpsToken","emptyArray","messageName","version","voice","text","systemMessage","legacyDevice","settings","status","device","bytes","initialSettings","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","create","encode","message","writer","hasOwnProperty","call","uint32","string","int64","int32","Voice","fork","ldelim","Text","SystemMessage","LegacyDevice","Settings","Status","DevContext","Device","Bytes","InitialSettings","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","isString","isInteger","low","high","Array","isArray","error","content","fromObject","object","String","fromValue","unsigned","parseInt","LongBits","toNumber","TypeError","toObject","options","arrays","defaults","long","longs","toString","Number","oneofs","j","toJSON","constructor","toJSONOptions","locale","platformType","platformVersion","surface","surfaceVersion","features","capabilities","deviceId","deviceManufacturer","deviceModel","additionalInfo","dubbing","echo","ttsEngine","asrEngine","asrAutoStop","devMode","authConnector","clientType","channel","channelVersion","platformName","sdkVersion","protocolVersion","data","newBuffer","base64","slice","type","code","description","technicalDescription","desc","name","timestampMs"],"mappings":"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","sourcesContent":["\"use strict\";\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function (global, factory) {\n    /* global define, require, module */\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define(['protobufjs/minimal'], factory);\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require('protobufjs/minimal'));\n})(this, function ($protobuf) {\n    'use strict';\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    // Exported root namespace\n    var $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});\n    $root.Message = (function () {\n        /**\n         * Properties of a Message.\n         * @exports IMessage\n         * @interface IMessage\n         * @property {string|null} [userId] Message userId\n         * @property {number|Long|null} [messageId] Message messageId\n         * @property {number|null} [last] Message last\n         * @property {string|null} [token] Message token\n         * @property {string|null} [userChannel] Message userChannel\n         * @property {string|null} [vpsToken] Message vpsToken\n         * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n         * @property {string|null} [messageName] Message messageName\n         * @property {number|null} [version] Message version\n         * @property {IVoice|null} [voice] Message voice\n         * @property {IText|null} [text] Message text\n         * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n         * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n         * @property {ISettings|null} [settings] Message settings\n         * @property {IStatus|null} [status] Message status\n         * @property {IDevice|null} [device] Message device\n         * @property {IBytes|null} [bytes] Message bytes\n         * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n         */\n        /**\n         * Constructs a new Message.\n         * @exports Message\n         * @classdesc Represents a Message.\n         * @implements IMessage\n         * @constructor\n         * @param {IMessage=} [properties] Properties to set\n         */\n        function Message(properties) {\n            this.devContext = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Message userId.\n         * @member {string} userId\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.userId = '';\n        /**\n         * Message messageId.\n         * @member {number|Long} messageId\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n        /**\n         * Message last.\n         * @member {number} last\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.last = 0;\n        /**\n         * Message token.\n         * @member {string} token\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.token = '';\n        /**\n         * Message userChannel.\n         * @member {string} userChannel\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.userChannel = '';\n        /**\n         * Message vpsToken.\n         * @member {string} vpsToken\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.vpsToken = '';\n        /**\n         * Устарело с версии 3.\n         * @member {Array.<IDevContext>} devContext\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.devContext = $util.emptyArray;\n        /**\n         * Message messageName.\n         * @member {string} messageName\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.messageName = '';\n        /**\n         * Message version.\n         * @member {number} version\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.version = 0;\n        /**\n         * Message voice.\n         * @member {IVoice|null|undefined} voice\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.voice = null;\n        /**\n         * Message text.\n         * @member {IText|null|undefined} text\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.text = null;\n        /**\n         * Message systemMessage.\n         * @member {ISystemMessage|null|undefined} systemMessage\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.systemMessage = null;\n        /**\n         * Message legacyDevice.\n         * @member {ILegacyDevice|null|undefined} legacyDevice\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.legacyDevice = null;\n        /**\n         * Message settings.\n         * @member {ISettings|null|undefined} settings\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.settings = null;\n        /**\n         * Message status.\n         * @member {IStatus|null|undefined} status\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.status = null;\n        /**\n         * Message device.\n         * @member {IDevice|null|undefined} device\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.device = null;\n        /**\n         * Message bytes.\n         * @member {IBytes|null|undefined} bytes\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.bytes = null;\n        /**\n         * Message initialSettings.\n         * @member {IInitialSettings|null|undefined} initialSettings\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.initialSettings = null;\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n        /**\n         * Message content.\n         * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|undefined} content\n         * @memberof Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, 'content', {\n            get: $util.oneOfGetter(($oneOfFields = [\n                'voice',\n                'text',\n                'systemMessage',\n                'legacyDevice',\n                'settings',\n                'status',\n                'device',\n                'bytes',\n                'initialSettings',\n            ])),\n            set: $util.oneOfSetter($oneOfFields),\n        });\n        /**\n         * Creates a new Message instance using the specified properties.\n         * @function create\n         * @memberof Message\n         * @static\n         * @param {IMessage=} [properties] Properties to set\n         * @returns {Message} Message instance\n         */\n        Message.create = function create(properties) {\n            return new Message(properties);\n        };\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n         * @function encode\n         * @memberof Message\n         * @static\n         * @param {IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, 'userId'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.userId);\n            if (message.messageId != null && Object.hasOwnProperty.call(message, 'messageId'))\n                writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.messageId);\n            if (message.last != null && Object.hasOwnProperty.call(message, 'last'))\n                writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.last);\n            if (message.token != null && Object.hasOwnProperty.call(message, 'token'))\n                writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.token);\n            if (message.voice != null && Object.hasOwnProperty.call(message, 'voice'))\n                $root.Voice.encode(message.voice, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n            if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n                $root.Text.encode(message.text, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n            if (message.systemMessage != null && Object.hasOwnProperty.call(message, 'systemMessage'))\n                $root.SystemMessage.encode(message.systemMessage, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n            if (message.legacyDevice != null && Object.hasOwnProperty.call(message, 'legacyDevice'))\n                $root.LegacyDevice.encode(message.legacyDevice, writer.uint32(/* id 8, wireType 2 =*/ 66).fork()).ldelim();\n            if (message.settings != null && Object.hasOwnProperty.call(message, 'settings'))\n                $root.Settings.encode(message.settings, writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\n            if (message.status != null && Object.hasOwnProperty.call(message, 'status'))\n                $root.Status.encode(message.status, writer.uint32(/* id 10, wireType 2 =*/ 82).fork()).ldelim();\n            if (message.userChannel != null && Object.hasOwnProperty.call(message, 'userChannel'))\n                writer.uint32(/* id 11, wireType 2 =*/ 90).string(message.userChannel);\n            if (message.vpsToken != null && Object.hasOwnProperty.call(message, 'vpsToken'))\n                writer.uint32(/* id 12, wireType 2 =*/ 98).string(message.vpsToken);\n            if (message.devContext != null && message.devContext.length)\n                for (var i = 0; i < message.devContext.length; ++i)\n                    $root.DevContext.encode(message.devContext[i], writer.uint32(/* id 13, wireType 2 =*/ 106).fork()).ldelim();\n            if (message.messageName != null && Object.hasOwnProperty.call(message, 'messageName'))\n                writer.uint32(/* id 14, wireType 2 =*/ 114).string(message.messageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, 'version'))\n                writer.uint32(/* id 15, wireType 0 =*/ 120).int32(message.version);\n            if (message.device != null && Object.hasOwnProperty.call(message, 'device'))\n                $root.Device.encode(message.device, writer.uint32(/* id 16, wireType 2 =*/ 130).fork()).ldelim();\n            if (message.bytes != null && Object.hasOwnProperty.call(message, 'bytes'))\n                $root.Bytes.encode(message.bytes, writer.uint32(/* id 17, wireType 2 =*/ 138).fork()).ldelim();\n            if (message.initialSettings != null && Object.hasOwnProperty.call(message, 'initialSettings'))\n                $root.InitialSettings.encode(message.initialSettings, writer.uint32(/* id 18, wireType 2 =*/ 146).fork()).ldelim();\n            return writer;\n        };\n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Message\n         * @static\n         * @param {IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Message();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.userId = reader.string();\n                        break;\n                    case 2:\n                        message.messageId = reader.int64();\n                        break;\n                    case 3:\n                        message.last = reader.int32();\n                        break;\n                    case 4:\n                        message.token = reader.string();\n                        break;\n                    case 11:\n                        message.userChannel = reader.string();\n                        break;\n                    case 12:\n                        message.vpsToken = reader.string();\n                        break;\n                    case 13:\n                        if (!(message.devContext && message.devContext.length))\n                            message.devContext = [];\n                        message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n                        break;\n                    case 14:\n                        message.messageName = reader.string();\n                        break;\n                    case 15:\n                        message.version = reader.int32();\n                        break;\n                    case 5:\n                        message.voice = $root.Voice.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.text = $root.Text.decode(reader, reader.uint32());\n                        break;\n                    case 7:\n                        message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n                        break;\n                    case 8:\n                        message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n                        break;\n                    case 9:\n                        message.settings = $root.Settings.decode(reader, reader.uint32());\n                        break;\n                    case 10:\n                        message.status = $root.Status.decode(reader, reader.uint32());\n                        break;\n                    case 16:\n                        message.device = $root.Device.decode(reader, reader.uint32());\n                        break;\n                    case 17:\n                        message.bytes = $root.Bytes.decode(reader, reader.uint32());\n                        break;\n                    case 18:\n                        message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Message message.\n         * @function verify\n         * @memberof Message\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Message.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            var properties = {};\n            if (message.userId != null && message.hasOwnProperty('userId'))\n                if (!$util.isString(message.userId))\n                    return 'userId: string expected';\n            if (message.messageId != null && message.hasOwnProperty('messageId'))\n                if (!$util.isInteger(message.messageId) &&\n                    !(message.messageId &&\n                        $util.isInteger(message.messageId.low) &&\n                        $util.isInteger(message.messageId.high)))\n                    return 'messageId: integer|Long expected';\n            if (message.last != null && message.hasOwnProperty('last'))\n                if (!$util.isInteger(message.last))\n                    return 'last: integer expected';\n            if (message.token != null && message.hasOwnProperty('token'))\n                if (!$util.isString(message.token))\n                    return 'token: string expected';\n            if (message.userChannel != null && message.hasOwnProperty('userChannel'))\n                if (!$util.isString(message.userChannel))\n                    return 'userChannel: string expected';\n            if (message.vpsToken != null && message.hasOwnProperty('vpsToken'))\n                if (!$util.isString(message.vpsToken))\n                    return 'vpsToken: string expected';\n            if (message.devContext != null && message.hasOwnProperty('devContext')) {\n                if (!Array.isArray(message.devContext))\n                    return 'devContext: array expected';\n                for (var i = 0; i < message.devContext.length; ++i) {\n                    var error = $root.DevContext.verify(message.devContext[i]);\n                    if (error)\n                        return 'devContext.' + error;\n                }\n            }\n            if (message.messageName != null && message.hasOwnProperty('messageName'))\n                if (!$util.isString(message.messageName))\n                    return 'messageName: string expected';\n            if (message.version != null && message.hasOwnProperty('version'))\n                if (!$util.isInteger(message.version))\n                    return 'version: integer expected';\n            if (message.voice != null && message.hasOwnProperty('voice')) {\n                properties.content = 1;\n                {\n                    var error = $root.Voice.verify(message.voice);\n                    if (error)\n                        return 'voice.' + error;\n                }\n            }\n            if (message.text != null && message.hasOwnProperty('text')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.Text.verify(message.text);\n                    if (error)\n                        return 'text.' + error;\n                }\n            }\n            if (message.systemMessage != null && message.hasOwnProperty('systemMessage')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.SystemMessage.verify(message.systemMessage);\n                    if (error)\n                        return 'systemMessage.' + error;\n                }\n            }\n            if (message.legacyDevice != null && message.hasOwnProperty('legacyDevice')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.LegacyDevice.verify(message.legacyDevice);\n                    if (error)\n                        return 'legacyDevice.' + error;\n                }\n            }\n            if (message.settings != null && message.hasOwnProperty('settings')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.Settings.verify(message.settings);\n                    if (error)\n                        return 'settings.' + error;\n                }\n            }\n            if (message.status != null && message.hasOwnProperty('status')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.Status.verify(message.status);\n                    if (error)\n                        return 'status.' + error;\n                }\n            }\n            if (message.device != null && message.hasOwnProperty('device')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.Device.verify(message.device);\n                    if (error)\n                        return 'device.' + error;\n                }\n            }\n            if (message.bytes != null && message.hasOwnProperty('bytes')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.Bytes.verify(message.bytes);\n                    if (error)\n                        return 'bytes.' + error;\n                }\n            }\n            if (message.initialSettings != null && message.hasOwnProperty('initialSettings')) {\n                if (properties.content === 1)\n                    return 'content: multiple values';\n                properties.content = 1;\n                {\n                    var error = $root.InitialSettings.verify(message.initialSettings);\n                    if (error)\n                        return 'initialSettings.' + error;\n                }\n            }\n            return null;\n        };\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Message} Message\n         */\n        Message.fromObject = function fromObject(object) {\n            if (object instanceof $root.Message)\n                return object;\n            var message = new $root.Message();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.messageId != null)\n                if ($util.Long)\n                    (message.messageId = $util.Long.fromValue(object.messageId)).unsigned = false;\n                else if (typeof object.messageId === 'string')\n                    message.messageId = parseInt(object.messageId, 10);\n                else if (typeof object.messageId === 'number')\n                    message.messageId = object.messageId;\n                else if (typeof object.messageId === 'object')\n                    message.messageId = new $util.LongBits(object.messageId.low >>> 0, object.messageId.high >>> 0).toNumber();\n            if (object.last != null)\n                message.last = object.last | 0;\n            if (object.token != null)\n                message.token = String(object.token);\n            if (object.userChannel != null)\n                message.userChannel = String(object.userChannel);\n            if (object.vpsToken != null)\n                message.vpsToken = String(object.vpsToken);\n            if (object.devContext) {\n                if (!Array.isArray(object.devContext))\n                    throw TypeError('.Message.devContext: array expected');\n                message.devContext = [];\n                for (var i = 0; i < object.devContext.length; ++i) {\n                    if (typeof object.devContext[i] !== 'object')\n                        throw TypeError('.Message.devContext: object expected');\n                    message.devContext[i] = $root.DevContext.fromObject(object.devContext[i]);\n                }\n            }\n            if (object.messageName != null)\n                message.messageName = String(object.messageName);\n            if (object.version != null)\n                message.version = object.version | 0;\n            if (object.voice != null) {\n                if (typeof object.voice !== 'object')\n                    throw TypeError('.Message.voice: object expected');\n                message.voice = $root.Voice.fromObject(object.voice);\n            }\n            if (object.text != null) {\n                if (typeof object.text !== 'object')\n                    throw TypeError('.Message.text: object expected');\n                message.text = $root.Text.fromObject(object.text);\n            }\n            if (object.systemMessage != null) {\n                if (typeof object.systemMessage !== 'object')\n                    throw TypeError('.Message.systemMessage: object expected');\n                message.systemMessage = $root.SystemMessage.fromObject(object.systemMessage);\n            }\n            if (object.legacyDevice != null) {\n                if (typeof object.legacyDevice !== 'object')\n                    throw TypeError('.Message.legacyDevice: object expected');\n                message.legacyDevice = $root.LegacyDevice.fromObject(object.legacyDevice);\n            }\n            if (object.settings != null) {\n                if (typeof object.settings !== 'object')\n                    throw TypeError('.Message.settings: object expected');\n                message.settings = $root.Settings.fromObject(object.settings);\n            }\n            if (object.status != null) {\n                if (typeof object.status !== 'object')\n                    throw TypeError('.Message.status: object expected');\n                message.status = $root.Status.fromObject(object.status);\n            }\n            if (object.device != null) {\n                if (typeof object.device !== 'object')\n                    throw TypeError('.Message.device: object expected');\n                message.device = $root.Device.fromObject(object.device);\n            }\n            if (object.bytes != null) {\n                if (typeof object.bytes !== 'object')\n                    throw TypeError('.Message.bytes: object expected');\n                message.bytes = $root.Bytes.fromObject(object.bytes);\n            }\n            if (object.initialSettings != null) {\n                if (typeof object.initialSettings !== 'object')\n                    throw TypeError('.Message.initialSettings: object expected');\n                message.initialSettings = $root.InitialSettings.fromObject(object.initialSettings);\n            }\n            return message;\n        };\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message\n         * @static\n         * @param {Message} message Message\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Message.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.devContext = [];\n            if (options.defaults) {\n                object.userId = '';\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.messageId =\n                        options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                }\n                else\n                    object.messageId = options.longs === String ? '0' : 0;\n                object.last = 0;\n                object.token = '';\n                object.userChannel = '';\n                object.vpsToken = '';\n                object.messageName = '';\n                object.version = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty('userId'))\n                object.userId = message.userId;\n            if (message.messageId != null && message.hasOwnProperty('messageId'))\n                if (typeof message.messageId === 'number')\n                    object.messageId = options.longs === String ? String(message.messageId) : message.messageId;\n                else\n                    object.messageId =\n                        options.longs === String\n                            ? $util.Long.prototype.toString.call(message.messageId)\n                            : options.longs === Number\n                                ? new $util.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0).toNumber()\n                                : message.messageId;\n            if (message.last != null && message.hasOwnProperty('last'))\n                object.last = message.last;\n            if (message.token != null && message.hasOwnProperty('token'))\n                object.token = message.token;\n            if (message.voice != null && message.hasOwnProperty('voice')) {\n                object.voice = $root.Voice.toObject(message.voice, options);\n                if (options.oneofs)\n                    object.content = 'voice';\n            }\n            if (message.text != null && message.hasOwnProperty('text')) {\n                object.text = $root.Text.toObject(message.text, options);\n                if (options.oneofs)\n                    object.content = 'text';\n            }\n            if (message.systemMessage != null && message.hasOwnProperty('systemMessage')) {\n                object.systemMessage = $root.SystemMessage.toObject(message.systemMessage, options);\n                if (options.oneofs)\n                    object.content = 'systemMessage';\n            }\n            if (message.legacyDevice != null && message.hasOwnProperty('legacyDevice')) {\n                object.legacyDevice = $root.LegacyDevice.toObject(message.legacyDevice, options);\n                if (options.oneofs)\n                    object.content = 'legacyDevice';\n            }\n            if (message.settings != null && message.hasOwnProperty('settings')) {\n                object.settings = $root.Settings.toObject(message.settings, options);\n                if (options.oneofs)\n                    object.content = 'settings';\n            }\n            if (message.status != null && message.hasOwnProperty('status')) {\n                object.status = $root.Status.toObject(message.status, options);\n                if (options.oneofs)\n                    object.content = 'status';\n            }\n            if (message.userChannel != null && message.hasOwnProperty('userChannel'))\n                object.userChannel = message.userChannel;\n            if (message.vpsToken != null && message.hasOwnProperty('vpsToken'))\n                object.vpsToken = message.vpsToken;\n            if (message.devContext && message.devContext.length) {\n                object.devContext = [];\n                for (var j = 0; j < message.devContext.length; ++j)\n                    object.devContext[j] = $root.DevContext.toObject(message.devContext[j], options);\n            }\n            if (message.messageName != null && message.hasOwnProperty('messageName'))\n                object.messageName = message.messageName;\n            if (message.version != null && message.hasOwnProperty('version'))\n                object.version = message.version;\n            if (message.device != null && message.hasOwnProperty('device')) {\n                object.device = $root.Device.toObject(message.device, options);\n                if (options.oneofs)\n                    object.content = 'device';\n            }\n            if (message.bytes != null && message.hasOwnProperty('bytes')) {\n                object.bytes = $root.Bytes.toObject(message.bytes, options);\n                if (options.oneofs)\n                    object.content = 'bytes';\n            }\n            if (message.initialSettings != null && message.hasOwnProperty('initialSettings')) {\n                object.initialSettings = $root.InitialSettings.toObject(message.initialSettings, options);\n                if (options.oneofs)\n                    object.content = 'initialSettings';\n            }\n            return object;\n        };\n        /**\n         * Converts this Message to JSON.\n         * @function toJSON\n         * @memberof Message\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Message.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Message;\n    })();\n    $root.InitialSettings = (function () {\n        /**\n         * Properties of an InitialSettings.\n         * @exports IInitialSettings\n         * @interface IInitialSettings\n         * @property {string|null} [userId] InitialSettings userId\n         * @property {string|null} [userChannel] InitialSettings userChannel\n         * @property {IDevice|null} [device] InitialSettings device\n         * @property {ISettings|null} [settings] InitialSettings settings\n         * @property {string|null} [locale] InitialSettings locale\n         */\n        /**\n         * Constructs a new InitialSettings.\n         * @exports InitialSettings\n         * @classdesc Represents an InitialSettings.\n         * @implements IInitialSettings\n         * @constructor\n         * @param {IInitialSettings=} [properties] Properties to set\n         */\n        function InitialSettings(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * InitialSettings userId.\n         * @member {string} userId\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.userId = '';\n        /**\n         * InitialSettings userChannel.\n         * @member {string} userChannel\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.userChannel = '';\n        /**\n         * InitialSettings device.\n         * @member {IDevice|null|undefined} device\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.device = null;\n        /**\n         * InitialSettings settings.\n         * @member {ISettings|null|undefined} settings\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.settings = null;\n        /**\n         * InitialSettings locale.\n         * @member {string} locale\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.locale = '';\n        /**\n         * Creates a new InitialSettings instance using the specified properties.\n         * @function create\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings=} [properties] Properties to set\n         * @returns {InitialSettings} InitialSettings instance\n         */\n        InitialSettings.create = function create(properties) {\n            return new InitialSettings(properties);\n        };\n        /**\n         * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n         * @function encode\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings} message InitialSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InitialSettings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, 'userId'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.userId);\n            if (message.userChannel != null && Object.hasOwnProperty.call(message, 'userChannel'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.userChannel);\n            if (message.device != null && Object.hasOwnProperty.call(message, 'device'))\n                $root.Device.encode(message.device, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\n            if (message.settings != null && Object.hasOwnProperty.call(message, 'settings'))\n                $root.Settings.encode(message.settings, writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\n            if (message.locale != null && Object.hasOwnProperty.call(message, 'locale'))\n                writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.locale);\n            return writer;\n        };\n        /**\n         * Encodes the specified InitialSettings message, length delimited. Does not implicitly {@link InitialSettings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings} message InitialSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InitialSettings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes an InitialSettings message from the specified reader or buffer.\n         * @function decode\n         * @memberof InitialSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {InitialSettings} InitialSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InitialSettings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InitialSettings();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.userId = reader.string();\n                        break;\n                    case 2:\n                        message.userChannel = reader.string();\n                        break;\n                    case 3:\n                        message.device = $root.Device.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.settings = $root.Settings.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        message.locale = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes an InitialSettings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof InitialSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {InitialSettings} InitialSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InitialSettings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies an InitialSettings message.\n         * @function verify\n         * @memberof InitialSettings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InitialSettings.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.userId != null && message.hasOwnProperty('userId'))\n                if (!$util.isString(message.userId))\n                    return 'userId: string expected';\n            if (message.userChannel != null && message.hasOwnProperty('userChannel'))\n                if (!$util.isString(message.userChannel))\n                    return 'userChannel: string expected';\n            if (message.device != null && message.hasOwnProperty('device')) {\n                var error = $root.Device.verify(message.device);\n                if (error)\n                    return 'device.' + error;\n            }\n            if (message.settings != null && message.hasOwnProperty('settings')) {\n                var error = $root.Settings.verify(message.settings);\n                if (error)\n                    return 'settings.' + error;\n            }\n            if (message.locale != null && message.hasOwnProperty('locale'))\n                if (!$util.isString(message.locale))\n                    return 'locale: string expected';\n            return null;\n        };\n        /**\n         * Creates an InitialSettings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof InitialSettings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {InitialSettings} InitialSettings\n         */\n        InitialSettings.fromObject = function fromObject(object) {\n            if (object instanceof $root.InitialSettings)\n                return object;\n            var message = new $root.InitialSettings();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.userChannel != null)\n                message.userChannel = String(object.userChannel);\n            if (object.device != null) {\n                if (typeof object.device !== 'object')\n                    throw TypeError('.InitialSettings.device: object expected');\n                message.device = $root.Device.fromObject(object.device);\n            }\n            if (object.settings != null) {\n                if (typeof object.settings !== 'object')\n                    throw TypeError('.InitialSettings.settings: object expected');\n                message.settings = $root.Settings.fromObject(object.settings);\n            }\n            if (object.locale != null)\n                message.locale = String(object.locale);\n            return message;\n        };\n        /**\n         * Creates a plain object from an InitialSettings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof InitialSettings\n         * @static\n         * @param {InitialSettings} message InitialSettings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InitialSettings.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.userId = '';\n                object.userChannel = '';\n                object.device = null;\n                object.settings = null;\n                object.locale = '';\n            }\n            if (message.userId != null && message.hasOwnProperty('userId'))\n                object.userId = message.userId;\n            if (message.userChannel != null && message.hasOwnProperty('userChannel'))\n                object.userChannel = message.userChannel;\n            if (message.device != null && message.hasOwnProperty('device'))\n                object.device = $root.Device.toObject(message.device, options);\n            if (message.settings != null && message.hasOwnProperty('settings'))\n                object.settings = $root.Settings.toObject(message.settings, options);\n            if (message.locale != null && message.hasOwnProperty('locale'))\n                object.locale = message.locale;\n            return object;\n        };\n        /**\n         * Converts this InitialSettings to JSON.\n         * @function toJSON\n         * @memberof InitialSettings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InitialSettings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return InitialSettings;\n    })();\n    $root.Device = (function () {\n        /**\n         * Properties of a Device.\n         * @exports IDevice\n         * @interface IDevice\n         * @property {string|null} [platformType] Device platformType\n         * @property {string|null} [platformVersion] Device platformVersion\n         * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n         * @property {string|null} [surfaceVersion] Device surfaceVersion\n         * @property {string|null} [features] Device features\n         * @property {string|null} [capabilities] Device capabilities\n         * @property {string|null} [deviceId] Device deviceId\n         * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n         * @property {string|null} [deviceModel] Device deviceModel\n         * @property {string|null} [additionalInfo] Device additionalInfo\n         */\n        /**\n         * Constructs a new Device.\n         * @exports Device\n         * @classdesc Represents a Device.\n         * @implements IDevice\n         * @constructor\n         * @param {IDevice=} [properties] Properties to set\n         */\n        function Device(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Device platformType.\n         * @member {string} platformType\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.platformType = '';\n        /**\n         * Device platformVersion.\n         * @member {string} platformVersion\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.platformVersion = '';\n        /**\n         * Обязательно. Пример, SBERBOX\n         * @member {string} surface\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.surface = '';\n        /**\n         * Device surfaceVersion.\n         * @member {string} surfaceVersion\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.surfaceVersion = '';\n        /**\n         * Device features.\n         * @member {string} features\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.features = '';\n        /**\n         * Device capabilities.\n         * @member {string} capabilities\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.capabilities = '';\n        /**\n         * Device deviceId.\n         * @member {string} deviceId\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceId = '';\n        /**\n         * Device deviceManufacturer.\n         * @member {string} deviceManufacturer\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceManufacturer = '';\n        /**\n         * Device deviceModel.\n         * @member {string} deviceModel\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceModel = '';\n        /**\n         * Device additionalInfo.\n         * @member {string} additionalInfo\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.additionalInfo = '';\n        /**\n         * Creates a new Device instance using the specified properties.\n         * @function create\n         * @memberof Device\n         * @static\n         * @param {IDevice=} [properties] Properties to set\n         * @returns {Device} Device instance\n         */\n        Device.create = function create(properties) {\n            return new Device(properties);\n        };\n        /**\n         * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n         * @function encode\n         * @memberof Device\n         * @static\n         * @param {IDevice} message Device message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Device.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.platformType != null && Object.hasOwnProperty.call(message, 'platformType'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.platformType);\n            if (message.platformVersion != null && Object.hasOwnProperty.call(message, 'platformVersion'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.platformVersion);\n            if (message.surface != null && Object.hasOwnProperty.call(message, 'surface'))\n                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.surface);\n            if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, 'surfaceVersion'))\n                writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.surfaceVersion);\n            if (message.features != null && Object.hasOwnProperty.call(message, 'features'))\n                writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.features);\n            if (message.capabilities != null && Object.hasOwnProperty.call(message, 'capabilities'))\n                writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.capabilities);\n            if (message.deviceId != null && Object.hasOwnProperty.call(message, 'deviceId'))\n                writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.deviceId);\n            if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, 'deviceManufacturer'))\n                writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.deviceManufacturer);\n            if (message.deviceModel != null && Object.hasOwnProperty.call(message, 'deviceModel'))\n                writer.uint32(/* id 9, wireType 2 =*/ 74).string(message.deviceModel);\n            if (message.additionalInfo != null && Object.hasOwnProperty.call(message, 'additionalInfo'))\n                writer.uint32(/* id 10, wireType 2 =*/ 82).string(message.additionalInfo);\n            return writer;\n        };\n        /**\n         * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Device\n         * @static\n         * @param {IDevice} message Device message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Device.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Device message from the specified reader or buffer.\n         * @function decode\n         * @memberof Device\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Device} Device\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Device.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Device();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.platformType = reader.string();\n                        break;\n                    case 2:\n                        message.platformVersion = reader.string();\n                        break;\n                    case 3:\n                        message.surface = reader.string();\n                        break;\n                    case 4:\n                        message.surfaceVersion = reader.string();\n                        break;\n                    case 5:\n                        message.features = reader.string();\n                        break;\n                    case 6:\n                        message.capabilities = reader.string();\n                        break;\n                    case 7:\n                        message.deviceId = reader.string();\n                        break;\n                    case 8:\n                        message.deviceManufacturer = reader.string();\n                        break;\n                    case 9:\n                        message.deviceModel = reader.string();\n                        break;\n                    case 10:\n                        message.additionalInfo = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Device message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Device\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Device} Device\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Device.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Device message.\n         * @function verify\n         * @memberof Device\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Device.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.platformType != null && message.hasOwnProperty('platformType'))\n                if (!$util.isString(message.platformType))\n                    return 'platformType: string expected';\n            if (message.platformVersion != null && message.hasOwnProperty('platformVersion'))\n                if (!$util.isString(message.platformVersion))\n                    return 'platformVersion: string expected';\n            if (message.surface != null && message.hasOwnProperty('surface'))\n                if (!$util.isString(message.surface))\n                    return 'surface: string expected';\n            if (message.surfaceVersion != null && message.hasOwnProperty('surfaceVersion'))\n                if (!$util.isString(message.surfaceVersion))\n                    return 'surfaceVersion: string expected';\n            if (message.features != null && message.hasOwnProperty('features'))\n                if (!$util.isString(message.features))\n                    return 'features: string expected';\n            if (message.capabilities != null && message.hasOwnProperty('capabilities'))\n                if (!$util.isString(message.capabilities))\n                    return 'capabilities: string expected';\n            if (message.deviceId != null && message.hasOwnProperty('deviceId'))\n                if (!$util.isString(message.deviceId))\n                    return 'deviceId: string expected';\n            if (message.deviceManufacturer != null && message.hasOwnProperty('deviceManufacturer'))\n                if (!$util.isString(message.deviceManufacturer))\n                    return 'deviceManufacturer: string expected';\n            if (message.deviceModel != null && message.hasOwnProperty('deviceModel'))\n                if (!$util.isString(message.deviceModel))\n                    return 'deviceModel: string expected';\n            if (message.additionalInfo != null && message.hasOwnProperty('additionalInfo'))\n                if (!$util.isString(message.additionalInfo))\n                    return 'additionalInfo: string expected';\n            return null;\n        };\n        /**\n         * Creates a Device message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Device\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Device} Device\n         */\n        Device.fromObject = function fromObject(object) {\n            if (object instanceof $root.Device)\n                return object;\n            var message = new $root.Device();\n            if (object.platformType != null)\n                message.platformType = String(object.platformType);\n            if (object.platformVersion != null)\n                message.platformVersion = String(object.platformVersion);\n            if (object.surface != null)\n                message.surface = String(object.surface);\n            if (object.surfaceVersion != null)\n                message.surfaceVersion = String(object.surfaceVersion);\n            if (object.features != null)\n                message.features = String(object.features);\n            if (object.capabilities != null)\n                message.capabilities = String(object.capabilities);\n            if (object.deviceId != null)\n                message.deviceId = String(object.deviceId);\n            if (object.deviceManufacturer != null)\n                message.deviceManufacturer = String(object.deviceManufacturer);\n            if (object.deviceModel != null)\n                message.deviceModel = String(object.deviceModel);\n            if (object.additionalInfo != null)\n                message.additionalInfo = String(object.additionalInfo);\n            return message;\n        };\n        /**\n         * Creates a plain object from a Device message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Device\n         * @static\n         * @param {Device} message Device\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Device.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.platformType = '';\n                object.platformVersion = '';\n                object.surface = '';\n                object.surfaceVersion = '';\n                object.features = '';\n                object.capabilities = '';\n                object.deviceId = '';\n                object.deviceManufacturer = '';\n                object.deviceModel = '';\n                object.additionalInfo = '';\n            }\n            if (message.platformType != null && message.hasOwnProperty('platformType'))\n                object.platformType = message.platformType;\n            if (message.platformVersion != null && message.hasOwnProperty('platformVersion'))\n                object.platformVersion = message.platformVersion;\n            if (message.surface != null && message.hasOwnProperty('surface'))\n                object.surface = message.surface;\n            if (message.surfaceVersion != null && message.hasOwnProperty('surfaceVersion'))\n                object.surfaceVersion = message.surfaceVersion;\n            if (message.features != null && message.hasOwnProperty('features'))\n                object.features = message.features;\n            if (message.capabilities != null && message.hasOwnProperty('capabilities'))\n                object.capabilities = message.capabilities;\n            if (message.deviceId != null && message.hasOwnProperty('deviceId'))\n                object.deviceId = message.deviceId;\n            if (message.deviceManufacturer != null && message.hasOwnProperty('deviceManufacturer'))\n                object.deviceManufacturer = message.deviceManufacturer;\n            if (message.deviceModel != null && message.hasOwnProperty('deviceModel'))\n                object.deviceModel = message.deviceModel;\n            if (message.additionalInfo != null && message.hasOwnProperty('additionalInfo'))\n                object.additionalInfo = message.additionalInfo;\n            return object;\n        };\n        /**\n         * Converts this Device to JSON.\n         * @function toJSON\n         * @memberof Device\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Device.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Device;\n    })();\n    $root.Settings = (function () {\n        /**\n         * Properties of a Settings.\n         * @exports ISettings\n         * @interface ISettings\n         * @property {number|null} [dubbing] Settings dubbing\n         * @property {number|null} [echo] Settings echo\n         * @property {string|null} [ttsEngine] Settings ttsEngine\n         * @property {string|null} [asrEngine] Settings asrEngine\n         * @property {number|null} [asrAutoStop] Settings asrAutoStop\n         * @property {number|null} [devMode] Settings devMode\n         * @property {string|null} [authConnector] Settings authConnector\n         * @property {string|null} [surface] Settings surface\n         */\n        /**\n         * Constructs a new Settings.\n         * @exports Settings\n         * @classdesc Represents a Settings.\n         * @implements ISettings\n         * @constructor\n         * @param {ISettings=} [properties] Properties to set\n         */\n        function Settings(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Settings dubbing.\n         * @member {number} dubbing\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.dubbing = 0;\n        /**\n         * Settings echo.\n         * @member {number} echo\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.echo = 0;\n        /**\n         * Settings ttsEngine.\n         * @member {string} ttsEngine\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.ttsEngine = '';\n        /**\n         * Settings asrEngine.\n         * @member {string} asrEngine\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.asrEngine = '';\n        /**\n         * Settings asrAutoStop.\n         * @member {number} asrAutoStop\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.asrAutoStop = 0;\n        /**\n         * Settings devMode.\n         * @member {number} devMode\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.devMode = 0;\n        /**\n         * Settings authConnector.\n         * @member {string} authConnector\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.authConnector = '';\n        /**\n         * Settings surface.\n         * @member {string} surface\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.surface = '';\n        /**\n         * Creates a new Settings instance using the specified properties.\n         * @function create\n         * @memberof Settings\n         * @static\n         * @param {ISettings=} [properties] Properties to set\n         * @returns {Settings} Settings instance\n         */\n        Settings.create = function create(properties) {\n            return new Settings(properties);\n        };\n        /**\n         * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n         * @function encode\n         * @memberof Settings\n         * @static\n         * @param {ISettings} message Settings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Settings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dubbing != null && Object.hasOwnProperty.call(message, 'dubbing'))\n                writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.dubbing);\n            if (message.echo != null && Object.hasOwnProperty.call(message, 'echo'))\n                writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.echo);\n            if (message.ttsEngine != null && Object.hasOwnProperty.call(message, 'ttsEngine'))\n                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.ttsEngine);\n            if (message.asrEngine != null && Object.hasOwnProperty.call(message, 'asrEngine'))\n                writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.asrEngine);\n            if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, 'asrAutoStop'))\n                writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.asrAutoStop);\n            if (message.devMode != null && Object.hasOwnProperty.call(message, 'devMode'))\n                writer.uint32(/* id 6, wireType 0 =*/ 48).int32(message.devMode);\n            if (message.authConnector != null && Object.hasOwnProperty.call(message, 'authConnector'))\n                writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.authConnector);\n            if (message.surface != null && Object.hasOwnProperty.call(message, 'surface'))\n                writer.uint32(/* id 8, wireType 2 =*/ 66).string(message.surface);\n            return writer;\n        };\n        /**\n         * Encodes the specified Settings message, length delimited. Does not implicitly {@link Settings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Settings\n         * @static\n         * @param {ISettings} message Settings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Settings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Settings message from the specified reader or buffer.\n         * @function decode\n         * @memberof Settings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Settings} Settings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Settings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Settings();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.dubbing = reader.int32();\n                        break;\n                    case 2:\n                        message.echo = reader.int32();\n                        break;\n                    case 3:\n                        message.ttsEngine = reader.string();\n                        break;\n                    case 4:\n                        message.asrEngine = reader.string();\n                        break;\n                    case 5:\n                        message.asrAutoStop = reader.int32();\n                        break;\n                    case 6:\n                        message.devMode = reader.int32();\n                        break;\n                    case 7:\n                        message.authConnector = reader.string();\n                        break;\n                    case 8:\n                        message.surface = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Settings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Settings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Settings} Settings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Settings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Settings message.\n         * @function verify\n         * @memberof Settings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Settings.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.dubbing != null && message.hasOwnProperty('dubbing'))\n                if (!$util.isInteger(message.dubbing))\n                    return 'dubbing: integer expected';\n            if (message.echo != null && message.hasOwnProperty('echo'))\n                if (!$util.isInteger(message.echo))\n                    return 'echo: integer expected';\n            if (message.ttsEngine != null && message.hasOwnProperty('ttsEngine'))\n                if (!$util.isString(message.ttsEngine))\n                    return 'ttsEngine: string expected';\n            if (message.asrEngine != null && message.hasOwnProperty('asrEngine'))\n                if (!$util.isString(message.asrEngine))\n                    return 'asrEngine: string expected';\n            if (message.asrAutoStop != null && message.hasOwnProperty('asrAutoStop'))\n                if (!$util.isInteger(message.asrAutoStop))\n                    return 'asrAutoStop: integer expected';\n            if (message.devMode != null && message.hasOwnProperty('devMode'))\n                if (!$util.isInteger(message.devMode))\n                    return 'devMode: integer expected';\n            if (message.authConnector != null && message.hasOwnProperty('authConnector'))\n                if (!$util.isString(message.authConnector))\n                    return 'authConnector: string expected';\n            if (message.surface != null && message.hasOwnProperty('surface'))\n                if (!$util.isString(message.surface))\n                    return 'surface: string expected';\n            return null;\n        };\n        /**\n         * Creates a Settings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Settings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Settings} Settings\n         */\n        Settings.fromObject = function fromObject(object) {\n            if (object instanceof $root.Settings)\n                return object;\n            var message = new $root.Settings();\n            if (object.dubbing != null)\n                message.dubbing = object.dubbing | 0;\n            if (object.echo != null)\n                message.echo = object.echo | 0;\n            if (object.ttsEngine != null)\n                message.ttsEngine = String(object.ttsEngine);\n            if (object.asrEngine != null)\n                message.asrEngine = String(object.asrEngine);\n            if (object.asrAutoStop != null)\n                message.asrAutoStop = object.asrAutoStop | 0;\n            if (object.devMode != null)\n                message.devMode = object.devMode | 0;\n            if (object.authConnector != null)\n                message.authConnector = String(object.authConnector);\n            if (object.surface != null)\n                message.surface = String(object.surface);\n            return message;\n        };\n        /**\n         * Creates a plain object from a Settings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Settings\n         * @static\n         * @param {Settings} message Settings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Settings.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.dubbing = 0;\n                object.echo = 0;\n                object.ttsEngine = '';\n                object.asrEngine = '';\n                object.asrAutoStop = 0;\n                object.devMode = 0;\n                object.authConnector = '';\n                object.surface = '';\n            }\n            if (message.dubbing != null && message.hasOwnProperty('dubbing'))\n                object.dubbing = message.dubbing;\n            if (message.echo != null && message.hasOwnProperty('echo'))\n                object.echo = message.echo;\n            if (message.ttsEngine != null && message.hasOwnProperty('ttsEngine'))\n                object.ttsEngine = message.ttsEngine;\n            if (message.asrEngine != null && message.hasOwnProperty('asrEngine'))\n                object.asrEngine = message.asrEngine;\n            if (message.asrAutoStop != null && message.hasOwnProperty('asrAutoStop'))\n                object.asrAutoStop = message.asrAutoStop;\n            if (message.devMode != null && message.hasOwnProperty('devMode'))\n                object.devMode = message.devMode;\n            if (message.authConnector != null && message.hasOwnProperty('authConnector'))\n                object.authConnector = message.authConnector;\n            if (message.surface != null && message.hasOwnProperty('surface'))\n                object.surface = message.surface;\n            return object;\n        };\n        /**\n         * Converts this Settings to JSON.\n         * @function toJSON\n         * @memberof Settings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Settings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Settings;\n    })();\n    $root.LegacyDevice = (function () {\n        /**\n         * Properties of a LegacyDevice.\n         * @exports ILegacyDevice\n         * @interface ILegacyDevice\n         * @property {string|null} [clientType] LegacyDevice clientType\n         * @property {string|null} [channel] LegacyDevice channel\n         * @property {string|null} [channelVersion] LegacyDevice channelVersion\n         * @property {string|null} [platformName] LegacyDevice platformName\n         * @property {string|null} [platformVersion] LegacyDevice platformVersion\n         * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n         * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n         */\n        /**\n         * Constructs a new LegacyDevice.\n         * @exports LegacyDevice\n         * @classdesc Represents a LegacyDevice.\n         * @implements ILegacyDevice\n         * @constructor\n         * @param {ILegacyDevice=} [properties] Properties to set\n         */\n        function LegacyDevice(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * LegacyDevice clientType.\n         * @member {string} clientType\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.clientType = '';\n        /**\n         * LegacyDevice channel.\n         * @member {string} channel\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.channel = '';\n        /**\n         * LegacyDevice channelVersion.\n         * @member {string} channelVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.channelVersion = '';\n        /**\n         * LegacyDevice platformName.\n         * @member {string} platformName\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.platformName = '';\n        /**\n         * LegacyDevice platformVersion.\n         * @member {string} platformVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.platformVersion = '';\n        /**\n         * LegacyDevice sdkVersion.\n         * @member {string} sdkVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.sdkVersion = '';\n        /**\n         * LegacyDevice protocolVersion.\n         * @member {string} protocolVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.protocolVersion = '';\n        /**\n         * Creates a new LegacyDevice instance using the specified properties.\n         * @function create\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice=} [properties] Properties to set\n         * @returns {LegacyDevice} LegacyDevice instance\n         */\n        LegacyDevice.create = function create(properties) {\n            return new LegacyDevice(properties);\n        };\n        /**\n         * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n         * @function encode\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LegacyDevice.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.clientType != null && Object.hasOwnProperty.call(message, 'clientType'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.clientType);\n            if (message.channel != null && Object.hasOwnProperty.call(message, 'channel'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.channel);\n            if (message.channelVersion != null && Object.hasOwnProperty.call(message, 'channelVersion'))\n                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.channelVersion);\n            if (message.platformName != null && Object.hasOwnProperty.call(message, 'platformName'))\n                writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.platformName);\n            if (message.platformVersion != null && Object.hasOwnProperty.call(message, 'platformVersion'))\n                writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.platformVersion);\n            if (message.sdkVersion != null && Object.hasOwnProperty.call(message, 'sdkVersion'))\n                writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.sdkVersion);\n            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, 'protocolVersion'))\n                writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.protocolVersion);\n            return writer;\n        };\n        /**\n         * Encodes the specified LegacyDevice message, length delimited. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LegacyDevice.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a LegacyDevice message from the specified reader or buffer.\n         * @function decode\n         * @memberof LegacyDevice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {LegacyDevice} LegacyDevice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LegacyDevice.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LegacyDevice();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.clientType = reader.string();\n                        break;\n                    case 2:\n                        message.channel = reader.string();\n                        break;\n                    case 3:\n                        message.channelVersion = reader.string();\n                        break;\n                    case 4:\n                        message.platformName = reader.string();\n                        break;\n                    case 5:\n                        message.platformVersion = reader.string();\n                        break;\n                    case 6:\n                        message.sdkVersion = reader.string();\n                        break;\n                    case 7:\n                        message.protocolVersion = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a LegacyDevice message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof LegacyDevice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {LegacyDevice} LegacyDevice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LegacyDevice.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a LegacyDevice message.\n         * @function verify\n         * @memberof LegacyDevice\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LegacyDevice.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.clientType != null && message.hasOwnProperty('clientType'))\n                if (!$util.isString(message.clientType))\n                    return 'clientType: string expected';\n            if (message.channel != null && message.hasOwnProperty('channel'))\n                if (!$util.isString(message.channel))\n                    return 'channel: string expected';\n            if (message.channelVersion != null && message.hasOwnProperty('channelVersion'))\n                if (!$util.isString(message.channelVersion))\n                    return 'channelVersion: string expected';\n            if (message.platformName != null && message.hasOwnProperty('platformName'))\n                if (!$util.isString(message.platformName))\n                    return 'platformName: string expected';\n            if (message.platformVersion != null && message.hasOwnProperty('platformVersion'))\n                if (!$util.isString(message.platformVersion))\n                    return 'platformVersion: string expected';\n            if (message.sdkVersion != null && message.hasOwnProperty('sdkVersion'))\n                if (!$util.isString(message.sdkVersion))\n                    return 'sdkVersion: string expected';\n            if (message.protocolVersion != null && message.hasOwnProperty('protocolVersion'))\n                if (!$util.isString(message.protocolVersion))\n                    return 'protocolVersion: string expected';\n            return null;\n        };\n        /**\n         * Creates a LegacyDevice message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof LegacyDevice\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {LegacyDevice} LegacyDevice\n         */\n        LegacyDevice.fromObject = function fromObject(object) {\n            if (object instanceof $root.LegacyDevice)\n                return object;\n            var message = new $root.LegacyDevice();\n            if (object.clientType != null)\n                message.clientType = String(object.clientType);\n            if (object.channel != null)\n                message.channel = String(object.channel);\n            if (object.channelVersion != null)\n                message.channelVersion = String(object.channelVersion);\n            if (object.platformName != null)\n                message.platformName = String(object.platformName);\n            if (object.platformVersion != null)\n                message.platformVersion = String(object.platformVersion);\n            if (object.sdkVersion != null)\n                message.sdkVersion = String(object.sdkVersion);\n            if (object.protocolVersion != null)\n                message.protocolVersion = String(object.protocolVersion);\n            return message;\n        };\n        /**\n         * Creates a plain object from a LegacyDevice message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof LegacyDevice\n         * @static\n         * @param {LegacyDevice} message LegacyDevice\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LegacyDevice.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.clientType = '';\n                object.channel = '';\n                object.channelVersion = '';\n                object.platformName = '';\n                object.platformVersion = '';\n                object.sdkVersion = '';\n                object.protocolVersion = '';\n            }\n            if (message.clientType != null && message.hasOwnProperty('clientType'))\n                object.clientType = message.clientType;\n            if (message.channel != null && message.hasOwnProperty('channel'))\n                object.channel = message.channel;\n            if (message.channelVersion != null && message.hasOwnProperty('channelVersion'))\n                object.channelVersion = message.channelVersion;\n            if (message.platformName != null && message.hasOwnProperty('platformName'))\n                object.platformName = message.platformName;\n            if (message.platformVersion != null && message.hasOwnProperty('platformVersion'))\n                object.platformVersion = message.platformVersion;\n            if (message.sdkVersion != null && message.hasOwnProperty('sdkVersion'))\n                object.sdkVersion = message.sdkVersion;\n            if (message.protocolVersion != null && message.hasOwnProperty('protocolVersion'))\n                object.protocolVersion = message.protocolVersion;\n            return object;\n        };\n        /**\n         * Converts this LegacyDevice to JSON.\n         * @function toJSON\n         * @memberof LegacyDevice\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LegacyDevice.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return LegacyDevice;\n    })();\n    $root.Voice = (function () {\n        /**\n         * Properties of a Voice.\n         * @exports IVoice\n         * @interface IVoice\n         * @property {Uint8Array|null} [data] Voice data\n         */\n        /**\n         * Constructs a new Voice.\n         * @exports Voice\n         * @classdesc Represents a Voice.\n         * @implements IVoice\n         * @constructor\n         * @param {IVoice=} [properties] Properties to set\n         */\n        function Voice(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Voice data.\n         * @member {Uint8Array} data\n         * @memberof Voice\n         * @instance\n         */\n        Voice.prototype.data = $util.newBuffer([]);\n        /**\n         * Creates a new Voice instance using the specified properties.\n         * @function create\n         * @memberof Voice\n         * @static\n         * @param {IVoice=} [properties] Properties to set\n         * @returns {Voice} Voice instance\n         */\n        Voice.create = function create(properties) {\n            return new Voice(properties);\n        };\n        /**\n         * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n         * @function encode\n         * @memberof Voice\n         * @static\n         * @param {IVoice} message Voice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Voice.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, 'data'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.data);\n            return writer;\n        };\n        /**\n         * Encodes the specified Voice message, length delimited. Does not implicitly {@link Voice.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Voice\n         * @static\n         * @param {IVoice} message Voice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Voice.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Voice message from the specified reader or buffer.\n         * @function decode\n         * @memberof Voice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Voice} Voice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Voice.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Voice();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.data = reader.bytes();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Voice message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Voice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Voice} Voice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Voice.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Voice message.\n         * @function verify\n         * @memberof Voice\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Voice.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.data != null && message.hasOwnProperty('data'))\n                if (!((message.data && typeof message.data.length === 'number') || $util.isString(message.data)))\n                    return 'data: buffer expected';\n            return null;\n        };\n        /**\n         * Creates a Voice message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Voice\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Voice} Voice\n         */\n        Voice.fromObject = function fromObject(object) {\n            if (object instanceof $root.Voice)\n                return object;\n            var message = new $root.Voice();\n            if (object.data != null)\n                if (typeof object.data === 'string')\n                    $util.base64.decode(object.data, (message.data = $util.newBuffer($util.base64.length(object.data))), 0);\n                else if (object.data.length)\n                    message.data = object.data;\n            return message;\n        };\n        /**\n         * Creates a plain object from a Voice message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Voice\n         * @static\n         * @param {Voice} message Voice\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Voice.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.data = '';\n                else {\n                    object.data = [];\n                    if (options.bytes !== Array)\n                        object.data = $util.newBuffer(object.data);\n                }\n            if (message.data != null && message.hasOwnProperty('data'))\n                object.data =\n                    options.bytes === String\n                        ? $util.base64.encode(message.data, 0, message.data.length)\n                        : options.bytes === Array\n                            ? Array.prototype.slice.call(message.data)\n                            : message.data;\n            return object;\n        };\n        /**\n         * Converts this Voice to JSON.\n         * @function toJSON\n         * @memberof Voice\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Voice.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Voice;\n    })();\n    $root.Text = (function () {\n        /**\n         * Properties of a Text.\n         * @exports IText\n         * @interface IText\n         * @property {string|null} [data] Text data\n         * @property {string|null} [type] Text type\n         */\n        /**\n         * Constructs a new Text.\n         * @exports Text\n         * @classdesc Represents a Text.\n         * @implements IText\n         * @constructor\n         * @param {IText=} [properties] Properties to set\n         */\n        function Text(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Text data.\n         * @member {string} data\n         * @memberof Text\n         * @instance\n         */\n        Text.prototype.data = '';\n        /**\n         * Text type.\n         * @member {string} type\n         * @memberof Text\n         * @instance\n         */\n        Text.prototype.type = '';\n        /**\n         * Creates a new Text instance using the specified properties.\n         * @function create\n         * @memberof Text\n         * @static\n         * @param {IText=} [properties] Properties to set\n         * @returns {Text} Text instance\n         */\n        Text.create = function create(properties) {\n            return new Text(properties);\n        };\n        /**\n         * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n         * @function encode\n         * @memberof Text\n         * @static\n         * @param {IText} message Text message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Text.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, 'data'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.data);\n            if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.type);\n            return writer;\n        };\n        /**\n         * Encodes the specified Text message, length delimited. Does not implicitly {@link Text.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Text\n         * @static\n         * @param {IText} message Text message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Text.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Text message from the specified reader or buffer.\n         * @function decode\n         * @memberof Text\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Text} Text\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Text.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Text();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.data = reader.string();\n                        break;\n                    case 2:\n                        message.type = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Text message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Text\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Text} Text\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Text.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Text message.\n         * @function verify\n         * @memberof Text\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Text.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.data != null && message.hasOwnProperty('data'))\n                if (!$util.isString(message.data))\n                    return 'data: string expected';\n            if (message.type != null && message.hasOwnProperty('type'))\n                if (!$util.isString(message.type))\n                    return 'type: string expected';\n            return null;\n        };\n        /**\n         * Creates a Text message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Text\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Text} Text\n         */\n        Text.fromObject = function fromObject(object) {\n            if (object instanceof $root.Text)\n                return object;\n            var message = new $root.Text();\n            if (object.data != null)\n                message.data = String(object.data);\n            if (object.type != null)\n                message.type = String(object.type);\n            return message;\n        };\n        /**\n         * Creates a plain object from a Text message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Text\n         * @static\n         * @param {Text} message Text\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Text.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.data = '';\n                object.type = '';\n            }\n            if (message.data != null && message.hasOwnProperty('data'))\n                object.data = message.data;\n            if (message.type != null && message.hasOwnProperty('type'))\n                object.type = message.type;\n            return object;\n        };\n        /**\n         * Converts this Text to JSON.\n         * @function toJSON\n         * @memberof Text\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Text.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Text;\n    })();\n    $root.SystemMessage = (function () {\n        /**\n         * Properties of a SystemMessage.\n         * @exports ISystemMessage\n         * @interface ISystemMessage\n         * @property {string|null} [data] SystemMessage data\n         */\n        /**\n         * Constructs a new SystemMessage.\n         * @exports SystemMessage\n         * @classdesc Represents a SystemMessage.\n         * @implements ISystemMessage\n         * @constructor\n         * @param {ISystemMessage=} [properties] Properties to set\n         */\n        function SystemMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * SystemMessage data.\n         * @member {string} data\n         * @memberof SystemMessage\n         * @instance\n         */\n        SystemMessage.prototype.data = '';\n        /**\n         * Creates a new SystemMessage instance using the specified properties.\n         * @function create\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage=} [properties] Properties to set\n         * @returns {SystemMessage} SystemMessage instance\n         */\n        SystemMessage.create = function create(properties) {\n            return new SystemMessage(properties);\n        };\n        /**\n         * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n         * @function encode\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage} message SystemMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, 'data'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.data);\n            return writer;\n        };\n        /**\n         * Encodes the specified SystemMessage message, length delimited. Does not implicitly {@link SystemMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage} message SystemMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a SystemMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof SystemMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {SystemMessage} SystemMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SystemMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.data = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a SystemMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof SystemMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {SystemMessage} SystemMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a SystemMessage message.\n         * @function verify\n         * @memberof SystemMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SystemMessage.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.data != null && message.hasOwnProperty('data'))\n                if (!$util.isString(message.data))\n                    return 'data: string expected';\n            return null;\n        };\n        /**\n         * Creates a SystemMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof SystemMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {SystemMessage} SystemMessage\n         */\n        SystemMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.SystemMessage)\n                return object;\n            var message = new $root.SystemMessage();\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n        /**\n         * Creates a plain object from a SystemMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof SystemMessage\n         * @static\n         * @param {SystemMessage} message SystemMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SystemMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.data = '';\n            if (message.data != null && message.hasOwnProperty('data'))\n                object.data = message.data;\n            return object;\n        };\n        /**\n         * Converts this SystemMessage to JSON.\n         * @function toJSON\n         * @memberof SystemMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SystemMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return SystemMessage;\n    })();\n    $root.Status = (function () {\n        /**\n         * Properties of a Status.\n         * @exports IStatus\n         * @interface IStatus\n         * @property {number|null} [code] Status code\n         * @property {string|null} [description] Status description\n         * @property {string|null} [technicalDescription] Status technicalDescription\n         */\n        /**\n         * Constructs a new Status.\n         * @exports Status\n         * @classdesc Represents a Status.\n         * @implements IStatus\n         * @constructor\n         * @param {IStatus=} [properties] Properties to set\n         */\n        function Status(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Status code.\n         * @member {number} code\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.code = 0;\n        /**\n         * Status description.\n         * @member {string} description\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.description = '';\n        /**\n         * Status technicalDescription.\n         * @member {string} technicalDescription\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.technicalDescription = '';\n        /**\n         * Creates a new Status instance using the specified properties.\n         * @function create\n         * @memberof Status\n         * @static\n         * @param {IStatus=} [properties] Properties to set\n         * @returns {Status} Status instance\n         */\n        Status.create = function create(properties) {\n            return new Status(properties);\n        };\n        /**\n         * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n         * @function encode\n         * @memberof Status\n         * @static\n         * @param {IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.code != null && Object.hasOwnProperty.call(message, 'code'))\n                writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.code);\n            if (message.description != null && Object.hasOwnProperty.call(message, 'description'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.description);\n            if (message.technicalDescription != null && Object.hasOwnProperty.call(message, 'technicalDescription'))\n                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.technicalDescription);\n            return writer;\n        };\n        /**\n         * Encodes the specified Status message, length delimited. Does not implicitly {@link Status.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Status\n         * @static\n         * @param {IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Status message from the specified reader or buffer.\n         * @function decode\n         * @memberof Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Status();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.code = reader.int32();\n                        break;\n                    case 2:\n                        message.description = reader.string();\n                        break;\n                    case 3:\n                        message.technicalDescription = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Status message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Status message.\n         * @function verify\n         * @memberof Status\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Status.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.code != null && message.hasOwnProperty('code'))\n                if (!$util.isInteger(message.code))\n                    return 'code: integer expected';\n            if (message.description != null && message.hasOwnProperty('description'))\n                if (!$util.isString(message.description))\n                    return 'description: string expected';\n            if (message.technicalDescription != null && message.hasOwnProperty('technicalDescription'))\n                if (!$util.isString(message.technicalDescription))\n                    return 'technicalDescription: string expected';\n            return null;\n        };\n        /**\n         * Creates a Status message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Status\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Status} Status\n         */\n        Status.fromObject = function fromObject(object) {\n            if (object instanceof $root.Status)\n                return object;\n            var message = new $root.Status();\n            if (object.code != null)\n                message.code = object.code | 0;\n            if (object.description != null)\n                message.description = String(object.description);\n            if (object.technicalDescription != null)\n                message.technicalDescription = String(object.technicalDescription);\n            return message;\n        };\n        /**\n         * Creates a plain object from a Status message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Status\n         * @static\n         * @param {Status} message Status\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Status.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.code = 0;\n                object.description = '';\n                object.technicalDescription = '';\n            }\n            if (message.code != null && message.hasOwnProperty('code'))\n                object.code = message.code;\n            if (message.description != null && message.hasOwnProperty('description'))\n                object.description = message.description;\n            if (message.technicalDescription != null && message.hasOwnProperty('technicalDescription'))\n                object.technicalDescription = message.technicalDescription;\n            return object;\n        };\n        /**\n         * Converts this Status to JSON.\n         * @function toJSON\n         * @memberof Status\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Status.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Status;\n    })();\n    $root.Bytes = (function () {\n        /**\n         * Properties of a Bytes.\n         * @exports IBytes\n         * @interface IBytes\n         * @property {Uint8Array|null} [data] Bytes data\n         * @property {string|null} [desc] Bytes desc\n         */\n        /**\n         * Constructs a new Bytes.\n         * @exports Bytes\n         * @classdesc Represents a Bytes.\n         * @implements IBytes\n         * @constructor\n         * @param {IBytes=} [properties] Properties to set\n         */\n        function Bytes(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * Bytes data.\n         * @member {Uint8Array} data\n         * @memberof Bytes\n         * @instance\n         */\n        Bytes.prototype.data = $util.newBuffer([]);\n        /**\n         * Bytes desc.\n         * @member {string} desc\n         * @memberof Bytes\n         * @instance\n         */\n        Bytes.prototype.desc = '';\n        /**\n         * Creates a new Bytes instance using the specified properties.\n         * @function create\n         * @memberof Bytes\n         * @static\n         * @param {IBytes=} [properties] Properties to set\n         * @returns {Bytes} Bytes instance\n         */\n        Bytes.create = function create(properties) {\n            return new Bytes(properties);\n        };\n        /**\n         * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n         * @function encode\n         * @memberof Bytes\n         * @static\n         * @param {IBytes} message Bytes message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Bytes.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, 'data'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.data);\n            if (message.desc != null && Object.hasOwnProperty.call(message, 'desc'))\n                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.desc);\n            return writer;\n        };\n        /**\n         * Encodes the specified Bytes message, length delimited. Does not implicitly {@link Bytes.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Bytes\n         * @static\n         * @param {IBytes} message Bytes message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Bytes.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a Bytes message from the specified reader or buffer.\n         * @function decode\n         * @memberof Bytes\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Bytes} Bytes\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Bytes.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bytes();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.data = reader.bytes();\n                        break;\n                    case 2:\n                        message.desc = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a Bytes message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Bytes\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Bytes} Bytes\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Bytes.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a Bytes message.\n         * @function verify\n         * @memberof Bytes\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Bytes.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.data != null && message.hasOwnProperty('data'))\n                if (!((message.data && typeof message.data.length === 'number') || $util.isString(message.data)))\n                    return 'data: buffer expected';\n            if (message.desc != null && message.hasOwnProperty('desc'))\n                if (!$util.isString(message.desc))\n                    return 'desc: string expected';\n            return null;\n        };\n        /**\n         * Creates a Bytes message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Bytes\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Bytes} Bytes\n         */\n        Bytes.fromObject = function fromObject(object) {\n            if (object instanceof $root.Bytes)\n                return object;\n            var message = new $root.Bytes();\n            if (object.data != null)\n                if (typeof object.data === 'string')\n                    $util.base64.decode(object.data, (message.data = $util.newBuffer($util.base64.length(object.data))), 0);\n                else if (object.data.length)\n                    message.data = object.data;\n            if (object.desc != null)\n                message.desc = String(object.desc);\n            return message;\n        };\n        /**\n         * Creates a plain object from a Bytes message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Bytes\n         * @static\n         * @param {Bytes} message Bytes\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Bytes.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.data = '';\n                else {\n                    object.data = [];\n                    if (options.bytes !== Array)\n                        object.data = $util.newBuffer(object.data);\n                }\n                object.desc = '';\n            }\n            if (message.data != null && message.hasOwnProperty('data'))\n                object.data =\n                    options.bytes === String\n                        ? $util.base64.encode(message.data, 0, message.data.length)\n                        : options.bytes === Array\n                            ? Array.prototype.slice.call(message.data)\n                            : message.data;\n            if (message.desc != null && message.hasOwnProperty('desc'))\n                object.desc = message.desc;\n            return object;\n        };\n        /**\n         * Converts this Bytes to JSON.\n         * @function toJSON\n         * @memberof Bytes\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Bytes.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return Bytes;\n    })();\n    $root.DevContext = (function () {\n        /**\n         * Properties of a DevContext.\n         * @exports IDevContext\n         * @interface IDevContext\n         * @property {string|null} [name] DevContext name\n         * @property {number|Long|null} [timestampMs] DevContext timestampMs\n         * @property {string|null} [data] DevContext data\n         */\n        /**\n         * Constructs a new DevContext.\n         * @exports DevContext\n         * @classdesc Represents a DevContext.\n         * @implements IDevContext\n         * @constructor\n         * @param {IDevContext=} [properties] Properties to set\n         */\n        function DevContext(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * DevContext name.\n         * @member {string} name\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.name = '';\n        /**\n         * DevContext timestampMs.\n         * @member {number|Long} timestampMs\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n        /**\n         * DevContext data.\n         * @member {string} data\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.data = '';\n        /**\n         * Creates a new DevContext instance using the specified properties.\n         * @function create\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext=} [properties] Properties to set\n         * @returns {DevContext} DevContext instance\n         */\n        DevContext.create = function create(properties) {\n            return new DevContext(properties);\n        };\n        /**\n         * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n         * @function encode\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext} message DevContext message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DevContext.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n                writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n            if (message.timestampMs != null && Object.hasOwnProperty.call(message, 'timestampMs'))\n                writer.uint32(/* id 2, wireType 0 =*/ 16).int64(message.timestampMs);\n            if (message.data != null && Object.hasOwnProperty.call(message, 'data'))\n                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.data);\n            return writer;\n        };\n        /**\n         * Encodes the specified DevContext message, length delimited. Does not implicitly {@link DevContext.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext} message DevContext message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DevContext.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a DevContext message from the specified reader or buffer.\n         * @function decode\n         * @memberof DevContext\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DevContext} DevContext\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DevContext.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DevContext();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message.timestampMs = reader.int64();\n                        break;\n                    case 3:\n                        message.data = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n        /**\n         * Decodes a DevContext message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DevContext\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DevContext} DevContext\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DevContext.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a DevContext message.\n         * @function verify\n         * @memberof DevContext\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DevContext.verify = function verify(message) {\n            if (typeof message !== 'object' || message === null)\n                return 'object expected';\n            if (message.name != null && message.hasOwnProperty('name'))\n                if (!$util.isString(message.name))\n                    return 'name: string expected';\n            if (message.timestampMs != null && message.hasOwnProperty('timestampMs'))\n                if (!$util.isInteger(message.timestampMs) &&\n                    !(message.timestampMs &&\n                        $util.isInteger(message.timestampMs.low) &&\n                        $util.isInteger(message.timestampMs.high)))\n                    return 'timestampMs: integer|Long expected';\n            if (message.data != null && message.hasOwnProperty('data'))\n                if (!$util.isString(message.data))\n                    return 'data: string expected';\n            return null;\n        };\n        /**\n         * Creates a DevContext message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DevContext\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DevContext} DevContext\n         */\n        DevContext.fromObject = function fromObject(object) {\n            if (object instanceof $root.DevContext)\n                return object;\n            var message = new $root.DevContext();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.timestampMs != null)\n                if ($util.Long)\n                    (message.timestampMs = $util.Long.fromValue(object.timestampMs)).unsigned = false;\n                else if (typeof object.timestampMs === 'string')\n                    message.timestampMs = parseInt(object.timestampMs, 10);\n                else if (typeof object.timestampMs === 'number')\n                    message.timestampMs = object.timestampMs;\n                else if (typeof object.timestampMs === 'object')\n                    message.timestampMs = new $util.LongBits(object.timestampMs.low >>> 0, object.timestampMs.high >>> 0).toNumber();\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n        /**\n         * Creates a plain object from a DevContext message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DevContext\n         * @static\n         * @param {DevContext} message DevContext\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DevContext.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = '';\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestampMs =\n                        options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                }\n                else\n                    object.timestampMs = options.longs === String ? '0' : 0;\n                object.data = '';\n            }\n            if (message.name != null && message.hasOwnProperty('name'))\n                object.name = message.name;\n            if (message.timestampMs != null && message.hasOwnProperty('timestampMs'))\n                if (typeof message.timestampMs === 'number')\n                    object.timestampMs = options.longs === String ? String(message.timestampMs) : message.timestampMs;\n                else\n                    object.timestampMs =\n                        options.longs === String\n                            ? $util.Long.prototype.toString.call(message.timestampMs)\n                            : options.longs === Number\n                                ? new $util.LongBits(message.timestampMs.low >>> 0, message.timestampMs.high >>> 0).toNumber()\n                                : message.timestampMs;\n            if (message.data != null && message.hasOwnProperty('data'))\n                object.data = message.data;\n            return object;\n        };\n        /**\n         * Converts this DevContext to JSON.\n         * @function toJSON\n         * @memberof DevContext\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DevContext.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return DevContext;\n    })();\n    return $root;\n});\n"]},"metadata":{},"sourceType":"script"}