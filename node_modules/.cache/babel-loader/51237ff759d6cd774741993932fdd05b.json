{"ast":null,"code":"const CURRENT_VERSION = '0.1.0';\n\nconst getDefaultLog = () => ({\n  entries: [],\n  version: CURRENT_VERSION\n});\n\nexport const createLogCallbackRecorder = (subscribe, defaultActive = true) => {\n  let isActive = defaultActive;\n  let currentLog = getDefaultLog();\n  subscribe(entry => {\n    var _a, _b;\n\n    if (isActive === false) {\n      return;\n    }\n\n    switch (entry.type) {\n      case 'incoming':\n        if ((_a = entry.message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n          currentLog.entries.push({\n            type: entry.type,\n            message: {\n              data: JSON.parse(entry.message.systemMessage.data),\n              name: entry.message.messageName\n            }\n          });\n        }\n\n        if (entry.message.text) {\n          currentLog.entries.push({\n            type: entry.type,\n            text: entry.message.text\n          });\n        }\n\n        break;\n\n      case 'outcoming':\n        if ((_b = entry.message.systemMessage) === null || _b === void 0 ? void 0 : _b.data) {\n          currentLog.entries.push({\n            type: entry.type,\n            message: {\n              data: JSON.parse(entry.message.systemMessage.data),\n              name: entry.message.messageName\n            }\n          });\n        }\n\n        if (entry.message.text) {\n          currentLog.entries.push({\n            type: entry.type,\n            text: entry.message.text\n          });\n        }\n\n        break;\n\n      default:\n        currentLog.parameters = entry.parameters;\n        break;\n    }\n  });\n\n  const getRecord = () => currentLog;\n\n  const start = () => {\n    currentLog = getDefaultLog();\n    isActive = true;\n  };\n\n  const stop = () => {\n    isActive = false;\n  };\n\n  return {\n    getRecord,\n    start,\n    stop\n  };\n};","map":{"version":3,"sources":["/home/zelairy/Рабочий стол/todo-canvas-app/node_modules/@sberdevices/assistant-client/dist/record/callback-recorder.js"],"names":["CURRENT_VERSION","getDefaultLog","entries","version","createLogCallbackRecorder","subscribe","defaultActive","isActive","currentLog","entry","_a","_b","type","message","systemMessage","data","push","JSON","parse","name","messageName","text","parameters","getRecord","start","stop"],"mappings":"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","sourcesContent":["const CURRENT_VERSION = '0.1.0';\nconst getDefaultLog = () => ({ entries: [], version: CURRENT_VERSION });\nexport const createLogCallbackRecorder = (subscribe, defaultActive = true) => {\n    let isActive = defaultActive;\n    let currentLog = getDefaultLog();\n    subscribe((entry) => {\n        var _a, _b;\n        if (isActive === false) {\n            return;\n        }\n        switch (entry.type) {\n            case 'incoming':\n                if ((_a = entry.message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n                    currentLog.entries.push({\n                        type: entry.type,\n                        message: {\n                            data: JSON.parse(entry.message.systemMessage.data),\n                            name: entry.message.messageName,\n                        },\n                    });\n                }\n                if (entry.message.text) {\n                    currentLog.entries.push({ type: entry.type, text: entry.message.text });\n                }\n                break;\n            case 'outcoming':\n                if ((_b = entry.message.systemMessage) === null || _b === void 0 ? void 0 : _b.data) {\n                    currentLog.entries.push({\n                        type: entry.type,\n                        message: {\n                            data: JSON.parse(entry.message.systemMessage.data),\n                            name: entry.message.messageName,\n                        },\n                    });\n                }\n                if (entry.message.text) {\n                    currentLog.entries.push({ type: entry.type, text: entry.message.text });\n                }\n                break;\n            default:\n                currentLog.parameters = entry.parameters;\n                break;\n        }\n    });\n    const getRecord = () => currentLog;\n    const start = () => {\n        currentLog = getDefaultLog();\n        isActive = true;\n    };\n    const stop = () => {\n        isActive = false;\n    };\n    return {\n        getRecord,\n        start,\n        stop,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}