/* eslint-disable no-unused-expressions, @typescript-eslint/camelcase, no-underscore-dangle */
/* eslint-disable @typescript-eslint/ban-ts-ignore */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createClient } from './client';
import { renderNativePanel } from './NativePanel/NativePanel';
import { createAudioRecorder } from './createAudioRecorder';
import { renderAssistantRecordPanel } from './record';
import { createCallbackLogger } from './record/callback-logger';
import { createConsoleLogger } from './record/console-logger';
import { createLogCallbackRecorder } from './record/callback-recorder';
import { createRecordDownloader } from './record/record-downloader';
const SDK_VERSION = '20.09.1.3576';
const APP_VERSION = '20.09.1.3576';
const CAPABILITIES = JSON.stringify({
    screen: { available: true, width: window.innerWidth, height: window.innerHeight },
    speak: { available: true },
});
const FEATURES = JSON.stringify({
    appTypes: ['DIALOG', 'WEB_APP'],
});
export const legacyDevice = {
    clientType: 'simple',
    channel: 'Android_SB',
    channelVersion: '8.1.0.2932_RC',
    platformName: 'WEBDBG 1.0',
    platformVersion: '1.0',
};
export const settings = {
    dubbing: 1,
    echo: -1,
};
export const initializeAssistantSDK = ({ initPhrase, url, userChannel, surface, userId = `webdbg_userid_${Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)}`, token = `webdbg_eribtoken_${Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)}`, surfaceVersion, deviceId, locale = 'ru', nativePanel = {
    defaultText: 'Покажи что-нибудь',
    render: renderNativePanel,
}, sdkVersion = SDK_VERSION, enableRecord, recordParams, settings: settingsOverride, voiceSettings, }) => {
    const device = {
        platformType: 'WEBDBG',
        platformVersion: '1.0',
        sdkVersion,
        surface,
        surfaceVersion: surfaceVersion || APP_VERSION,
        features: FEATURES,
        capabilities: CAPABILITIES,
        deviceId,
        additionalInfo: JSON.stringify({
            host_app_id: 'ru.sberbank.sdakit.demo',
            sdk_version: sdkVersion,
        }),
    };
    let clientLogger = (recordParams === null || recordParams === void 0 ? void 0 : recordParams.logger) ? recordParams.logger : createConsoleLogger();
    let loggerCb;
    const recorder = createLogCallbackRecorder((subscribe) => {
        loggerCb = subscribe;
    }, (recordParams === null || recordParams === void 0 ? void 0 : recordParams.defaultActive) != null ? recordParams.defaultActive : true);
    const saver = createRecordDownloader();
    if (enableRecord && (recordParams === null || recordParams === void 0 ? void 0 : recordParams.logger) == null) {
        clientLogger = createCallbackLogger((logEntry) => loggerCb && loggerCb(logEntry));
    }
    const vpsClient = createClient({
        url,
        userId,
        token,
        userChannel,
        locale,
        device,
        legacyDevice,
        settings: settingsOverride || settings,
        version: 3,
    }, clientLogger, voiceSettings);
    let appInfo;
    const initialSmartAppData = [];
    const requestIdMap = {};
    let clientReady = false; // флаг готовности клиента к приему onData
    let assistantReady = false; // флаг готовности контекста ассистента
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let state = null;
    const createSystemMessageBase = () => {
        return {
            app_info: appInfo,
            meta: {
                current_app: {
                    app_info: appInfo,
                    state,
                },
            },
        };
    };
    const sendServerAction = ({ data, message_name, requestId, }) => {
        let messageId;
        if (requestId) {
            messageId = Date.now();
            requestIdMap[messageId.toString()] = requestId;
        }
        return vpsClient.sendSystemMessage({
            data: Object.assign(Object.assign({}, createSystemMessageBase()), { server_action: data }),
            messageName: message_name || 'SERVER_ACTION',
        }, undefined, messageId);
    };
    const updateState = () => {
        var _a;
        if ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onRequestState) {
            state = window.AssistantClient.onRequestState();
        }
    };
    const sendText = (text, params = {}) => {
        updateState();
        return vpsClient.batch(({ sendText, sendSystemMessage }) => {
            state &&
                sendSystemMessage({
                    data: Object.assign({}, createSystemMessageBase()),
                    messageName: '',
                }, false);
            return sendText(text, params);
        });
    };
    const fn = () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        yield new Promise((resolve) => {
            vpsClient.on('ready', resolve);
        });
        yield vpsClient.sendSystemMessage({ data: {}, messageName: 'OPEN_ASSISTANT' });
        if (initPhrase) {
            const res = yield vpsClient.sendText(initPhrase);
            appInfo = res === null || res === void 0 ? void 0 : res.app_info;
            (res === null || res === void 0 ? void 0 : res.character) && initialSmartAppData.push({ type: 'character', character: res.character });
            for (const item of (res === null || res === void 0 ? void 0 : res.items) || []) {
                if (item.command != null) {
                    initialSmartAppData.push(item.command);
                }
            }
            if (clientReady && ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData)) {
                ((_b = window.AssistantClient) === null || _b === void 0 ? void 0 : _b.onStart) && ((_c = window.AssistantClient) === null || _c === void 0 ? void 0 : _c.onStart());
                for (const smartAppData of initialSmartAppData) {
                    window.AssistantClient.onData(smartAppData);
                }
            }
            assistantReady = true;
        }
    });
    const promise = fn();
    window.appInitialData = initialSmartAppData;
    window.AssistantHost = {
        close() {
            appInfo = undefined;
            initialSmartAppData.splice(0, initialSmartAppData.length);
            state = null;
            sendText('Хватит'); // нужно слать close_app
        },
        ready() {
            var _a, _b, _c;
            if (assistantReady && ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData)) {
                ((_b = window.AssistantClient) === null || _b === void 0 ? void 0 : _b.onStart) && ((_c = window.AssistantClient) === null || _c === void 0 ? void 0 : _c.onStart());
                for (const smartAppData of initialSmartAppData) {
                    window.AssistantClient.onData(smartAppData);
                }
            }
            clientReady = true;
        },
        sendData(payload, messageName = null) {
            return __awaiter(this, void 0, void 0, function* () {
                yield promise;
                updateState();
                sendServerAction({ data: JSON.parse(payload), message_name: messageName || undefined });
            });
        },
        sendDataContainer(container) {
            return __awaiter(this, void 0, void 0, function* () {
                yield promise;
                updateState();
                sendServerAction(JSON.parse(container));
            });
        },
        setSuggest() { },
    };
    const createVoiceStream = () => {
        updateState();
        return vpsClient.createVoiceStream(createSystemMessageBase());
    };
    const updateDevUI = (suggestions = []) => {
        if (nativePanel) {
            const { render } = nativePanel, props = __rest(nativePanel, ["render"]);
            (render || renderNativePanel)(Object.assign(Object.assign({}, props), { sendText,
                createVoiceStream,
                suggestions }));
        }
    };
    vpsClient.on('systemMessage', (message, original) => {
        var _a, _b, _c;
        for (const item of message.items) {
            if (item.command) {
                if (clientReady && assistantReady && ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData)) {
                    window.AssistantClient.onData(Object.assign(Object.assign({}, item.command), { sdkMeta: { mid: original.messageId, requestId: requestIdMap[original.messageId.toString()] } }));
                }
            }
        }
        updateDevUI((_c = (_b = message.suggestions) === null || _b === void 0 ? void 0 : _b.buttons) !== null && _c !== void 0 ? _c : []);
    });
    updateDevUI();
    enableRecord && renderAssistantRecordPanel(recorder, saver);
    return {
        sendText,
        createVoiceStream,
        createAudioRecorder,
        on: vpsClient.on,
        destroy: vpsClient.destroy,
    };
};
