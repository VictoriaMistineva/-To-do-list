import { Settings, SystemMessage, Device, IDevice, ISettings, Text, Voice, LegacyDevice, ILegacyDevice, InitialSettings, IInitialSettings } from './proto';
import { EventsType, SystemMessageDataType, VpsVersion, CreateClientDataType, ClientLogger, VoicePlayerSettings } from './typings';
export declare const MESSAGE_NAMES: {
    ANSWER_TO_USER: string;
    STT: string;
};
export declare const appendHeader: (buffer: Uint8Array) => Uint8Array;
export declare const createClient: (clientParams: CreateClientDataType, logger?: ClientLogger | undefined, voiceSettings?: VoicePlayerSettings | undefined) => {
    once: <K extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K, cb: EventsType[K]) => () => void;
    send: ({ payload, messageId, ...other }: {
        payload: ({
            settings: Settings;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            device: Device;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            systemMessage: SystemMessage;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            text: Text;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            voice: Voice;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            legacyDevice: LegacyDevice;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        }) | ({
            initialSettings: InitialSettings;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
        });
        messageId: number;
    }) => void;
    sendDevice: (data: IDevice, last?: boolean, messageId?: number) => void;
    sendLegacyDevice: (data: ILegacyDevice, last?: boolean, messageId?: number) => void;
    sendSettings: (data: ISettings, last?: boolean, messageId?: number) => void;
    sendText: (data: string, params?: {
        messageId?: number | undefined;
        last?: 1 | -1 | undefined;
        messageName?: string | undefined;
        vpsToken?: string | undefined;
        userId?: string | undefined;
        token?: string | undefined;
        userChannel?: string | undefined;
        version?: VpsVersion | undefined;
    }, type?: string, messageId?: number) => Promise<SystemMessageDataType>;
    createVoiceStream: (meta?: Record<string, any> | undefined, messageId?: number) => {
        write: (data: ArrayBuffer, last?: boolean) => void;
        answerToUser: Promise<SystemMessageDataType>;
        on: <K_1 extends "stt">(event: K_1, cb: {
            stt: (text: string, last: boolean) => void;
        }[K_1]) => () => void;
    };
    sendSystemMessage: ({ data, messageName }: {
        data: Record<string, any>;
        messageName?: string | undefined;
    }, last?: boolean, messageId?: number) => Promise<SystemMessageDataType>;
    on: <K_2 extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K_2, cb: EventsType[K_2]) => () => void;
    updateDefauls: (obj: Partial<{
        userId: string;
        token: string;
        userChannel: string;
        messageName: string | undefined;
        vpsToken: string | undefined;
        version: VpsVersion;
    }> | Partial<{
        token: string;
        messageName: string | undefined;
        version: VpsVersion;
        userId?: undefined;
        userChannel?: undefined;
        vpsToken?: undefined;
    }>) => void;
    destroy: () => void;
    batch: <T>(cb: (methods: {
        sendDevice: (data: IDevice, last?: boolean, messageId?: number) => void;
        sendLegacyDevice: (data: ILegacyDevice, last?: boolean, messageId?: number) => void;
        sendSettings: (data: ISettings, last?: boolean, messageId?: number) => void;
        sendInitialSettings: (data: IInitialSettings, last?: boolean, messageId?: number) => void;
        send: ({ payload, messageId, ...other }: {
            payload: ({
                settings: Settings;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                device: Device;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                systemMessage: SystemMessage;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                text: Text;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                voice: Voice;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                legacyDevice: LegacyDevice;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            }) | ({
                initialSettings: InitialSettings;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
            });
            messageId: number;
        }) => void;
        sendText: (data: string, params?: {
            messageId?: number | undefined;
            last?: 1 | -1 | undefined;
            messageName?: string | undefined;
            vpsToken?: string | undefined;
            userId?: string | undefined;
            token?: string | undefined;
            userChannel?: string | undefined;
            version?: VpsVersion | undefined;
        }, type?: string, messageId?: number) => Promise<SystemMessageDataType>;
        createVoiceStream: (meta?: Record<string, any> | undefined, messageId?: number) => {
            write: (data: ArrayBuffer, last?: boolean) => void;
            answerToUser: Promise<SystemMessageDataType>;
            on: <K_1 extends "stt">(event: K_1, cb: {
                stt: (text: string, last: boolean) => void;
            }[K_1]) => () => void;
        };
        sendSystemMessage: ({ data, messageName }: {
            data: Record<string, any>;
            messageName?: string | undefined;
        }, last?: boolean, messageId?: number) => Promise<SystemMessageDataType>;
    }) => T) => T;
    readonly currentMessageId: number;
};
//# sourceMappingURL=client.d.ts.map