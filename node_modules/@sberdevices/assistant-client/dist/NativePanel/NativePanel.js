/* stylelint-disable */
import React, { useState, useEffect } from 'react';
import { render } from 'react-dom';
import { createAudioRecorder } from '../createAudioRecorder';
import assistantSphereIcon from './sphere.png';
import './styles.css';
export const NativePanel = ({ defaultText, sendText, className, tabIndex, createVoiceStream, suggestions, }) => {
    const [value, setValue] = useState(defaultText);
    const [recording, setRecording] = useState(false);
    const handleSphereClick = () => {
        setValue('');
        setRecording(!recording);
    };
    const createSuggestClickHandler = (suggest) => () => {
        const { action } = suggest;
        if (action.type === 'text' && action.text != null) {
            sendText(action.text);
        }
    };
    useEffect(() => {
        if (recording) {
            let outerAudioRecorder = null;
            let outerStream = null;
            let finished = false;
            navigator.mediaDevices
                .getUserMedia({
                audio: true,
            })
                .then((stream) => {
                outerStream = stream;
                const audioRecorder = createAudioRecorder(stream);
                outerAudioRecorder = audioRecorder;
                const voiceStream = createVoiceStream();
                audioRecorder.start();
                audioRecorder.on('data', (chunk, last) => {
                    if (!finished) {
                        voiceStream.write(new Uint8Array(chunk), last);
                    }
                });
                voiceStream.on('stt', (text, last) => {
                    if (last) {
                        finished = true;
                        setRecording(false);
                        setValue('');
                    }
                    else {
                        setValue(text);
                    }
                });
            });
            return () => {
                outerAudioRecorder === null || outerAudioRecorder === void 0 ? void 0 : outerAudioRecorder.stop();
                if (outerStream) {
                    outerStream.getTracks().forEach((track) => track.stop());
                }
            };
        }
        return undefined;
    }, [createVoiceStream, recording, sendText]);
    return (React.createElement("div", { className: className ? `nativePanel ${className}` : 'nativePanel' },
        React.createElement("div", { className: recording ? 'sphere active' : 'sphere', onClick: () => {
                if (!recording) {
                    handleSphereClick();
                }
            }, style: {
                backgroundImage: `url(${assistantSphereIcon})`,
            } }),
        React.createElement("label", { htmlFor: "voice", className: "label" }, "\u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435"),
        React.createElement("input", { id: "voice", value: value, onChange: (e) => {
                setValue(e.currentTarget.value);
            }, tabIndex: typeof tabIndex === 'number' && Number.isInteger(tabIndex) ? tabIndex : -1, disabled: recording, onKeyDown: (e) => {
                if (e.key === 'Enter') {
                    sendText(value);
                    setValue('');
                }
            }, className: "input" }),
        React.createElement("div", { className: "suggestPanel" }, suggestions.map((s) => (React.createElement("div", { key: `suggest-${s.title}`, onClick: createSuggestClickHandler(s), className: "suggest" }, s.title))))));
};
let div;
export const renderNativePanel = (props) => {
    if (!div) {
        div = document.createElement('div');
        document.body.appendChild(div);
    }
    render(React.createElement(NativePanel, Object.assign({}, props)), div);
};
