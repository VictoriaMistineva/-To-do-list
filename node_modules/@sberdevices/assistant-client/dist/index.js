import { createNanoEvents } from './nanoevents';
import { initializeAssistantSDK, settings } from './dev';
export const createAssistant = ({ getState, getRecoveryState, }) => {
    let currentGetState = getState;
    let currentGetRecoveryState = getRecoveryState;
    const { on, emit } = createNanoEvents();
    window.AssistantClient = {
        onData: (command) => emit('data', command),
        onRequestState: () => {
            return currentGetState();
        },
        onRequestRecoveryState: () => {
            if (currentGetRecoveryState) {
                return currentGetRecoveryState();
            }
            return undefined;
        },
        onStart: () => emit('start'),
    };
    setTimeout(() => { var _a; return (_a = window.AssistantHost) === null || _a === void 0 ? void 0 : _a.ready(); }); // таймаут для подписки на start
    return {
        close: () => { var _a; return (_a = window.AssistantHost) === null || _a === void 0 ? void 0 : _a.close(); },
        getInitialData: () => window.appInitialData,
        getRecoveryState: () => window.appRecoveryState,
        on,
        sendData: ({ action, name, requestId, }) => {
            var _a, _b, _c;
            if ((_a = window.AssistantHost) === null || _a === void 0 ? void 0 : _a.sendDataContainer) {
                /* eslint-disable-next-line @typescript-eslint/camelcase */
                (_b = window.AssistantHost) === null || _b === void 0 ? void 0 : _b.sendDataContainer(JSON.stringify({ data: action, message_name: name || null, requestId }));
            }
            else {
                (_c = window.AssistantHost) === null || _c === void 0 ? void 0 : _c.sendData(JSON.stringify(action), name || null);
            }
        },
        setGetState: (nextGetState) => {
            currentGetState = nextGetState;
        },
        setGetRecoveryState: (nextGetRecoveryState) => {
            currentGetRecoveryState = nextGetRecoveryState;
        },
        setSuggest: (suggest) => { var _a; return (_a = window.AssistantHost) === null || _a === void 0 ? void 0 : _a.setSuggest(suggest); },
    };
};
export const createAssistantDev = ({ getState, getRecoveryState, initPhrase, nativePanel, url, userId, token, userChannel, surface, surfaceVersion, sdkVersion, enableRecord = false, recordParams, settings, voiceSettings, }) => {
    initializeAssistantSDK({
        initPhrase,
        nativePanel,
        url,
        userId,
        token,
        userChannel,
        surface,
        surfaceVersion,
        sdkVersion,
        enableRecord,
        recordParams,
        settings,
        voiceSettings: voiceSettings || { startVoiceDelay: 1 },
    });
    return createAssistant({ getState, getRecoveryState });
};
const parseJwt = (token) => {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64)
        .split('')
        .map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)
        .join(''));
    return JSON.parse(jsonPayload);
};
// Публичный метод, использующий токен из SmartApp Studio
export const createSmartappDebugger = ({ token, initPhrase, getState, getRecoveryState, }) => {
    try {
        const { exp } = parseJwt(token);
        if (exp * 1000 <= Date.now()) {
            alert('Срок действия токена истек!');
            throw new Error('Token expired');
        }
    }
    catch (exc) {
        if (exc.message !== 'Token expired') {
            alert('Указан невалидный токен!');
            throw new Error('Wrong token');
        }
        throw exc;
    }
    return createAssistantDev({
        initPhrase,
        token,
        settings: Object.assign(Object.assign({}, settings), { authConnector: 'developer_portal_jwt' }),
        getState,
        getRecoveryState,
        url: 'wss://nlp2vps.online.sberbank.ru:443/vps/',
        surface: 'SBERBOX',
        userChannel: 'B2C',
    });
};
export { createRecordOfflinePlayer as createRecordPlayer } from './record/offline-player';
export * from './typings';
export * from './dev';
export { createClient } from './client';
export { createAudioRecorder } from './createAudioRecorder';
export { initializeDebugging } from './debug';
