/* eslint-disable @typescript-eslint/camelcase */
/* eslint-disable no-underscore-dangle */
import axios from 'axios';
import { v4 } from 'uuid';
const STATE_UPDATE_TIMEOUT = 200;
const createMessage = (props) => {
    const messageName = props.data ? 'SERVER_ACTION' : props.name || 'MESSAGE_TO_SKILL';
    const systemMessage = props.data
        ? {
            systemMessage: {
                data: {
                    app_info: {},
                    server_action: JSON.parse(props.data),
                },
            },
        }
        : {};
    const payload = {
        payload: {
            applicationId: props.applicationId,
            appversionId: props.appVersionId,
            message: props.text
                ? {
                    original_text: props.text,
                }
                : {},
            device: props.config.device || {
                type: 'SBERBOX',
                locale: 'ru-RU',
                timezone: '+03:00',
                install_id: v4(),
            },
        },
    };
    return Object.assign(Object.assign({ messageName, sessionId: props.sessionId, messageId: String(Math.floor(Math.random() * Math.floor(9999999))), meta: {
            current_app: {
                state: props.state,
            },
        }, uuid: {
            userId: props.userId,
            userChannel: 'FAKE',
        } }, systemMessage), payload);
};
const defaultConfig = {
    request: {
        url: 'sberbank.ru',
    },
    onRequest: (props) => props,
    onResponse: (res) => res,
    onError: () => { },
};
export function initializeDebugging(config = defaultConfig) {
    const currentAppState = {};
    const sessionId = v4();
    const userId = v4();
    const applicationId = v4();
    const appVersionId = v4();
    const createMessageInSession = (props) => createMessage(Object.assign({ config,
        userId,
        sessionId,
        applicationId,
        appVersionId, state: currentAppState }, props));
    const ask = (props) => {
        var _a, _b;
        return axios({
            method: ((_a = config.request) === null || _a === void 0 ? void 0 : _a.method) || 'post',
            url: config.request.url,
            headers: (_b = config.request) === null || _b === void 0 ? void 0 : _b.headers,
            data: config.onRequest(createMessageInSession(props)),
        })
            .then(config.onResponse)
            .then((action) => {
            var _a;
            if (action && ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData)) {
                window.AssistantClient.onData(action);
            }
        })
            .catch(config.onError);
    };
    window.AssistantHost = {
        close() { },
        ready() {
            setTimeout(() => {
                var _a;
                if ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onStart)
                    window.AssistantClient.onStart();
            }, 0);
        },
        sendData(data, name) {
            ask({
                data,
                name: name || undefined,
            });
        },
        sendDataContainer(container) {
            const { data, message_name } = JSON.parse(container);
            ask({
                data,
                name: message_name || undefined,
            });
        },
        setSuggest() { },
    };
    window.__dangerouslyGetAssistantAppState = () => (Object.assign({}, currentAppState));
    window.__dangerouslySendVoiceMessage = (text) => {
        var _a;
        if ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onRequestState)
            window.AssistantClient.onRequestState();
        setTimeout(() => ask({
            text,
        }), STATE_UPDATE_TIMEOUT);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    window.__dangerouslySendDataMessage = (data, name = null) => { var _a; return (_a = window.AssistantHost) === null || _a === void 0 ? void 0 : _a.sendData(JSON.stringify(data), name); };
}
