import React, { useEffect, useRef, useState } from 'react';
import { render } from 'react-dom';
import './styles.css';
const AssistantRecordPanel = ({ recorder, onSave }) => {
    const [isRecording, setIsRecording] = useState(true);
    const [record, setRecord] = useState();
    const recorderRef = useRef();
    const handleStart = React.useCallback(() => {
        var _a;
        (_a = recorderRef.current) === null || _a === void 0 ? void 0 : _a.start();
        setIsRecording(true);
        setRecord(undefined);
    }, []);
    const handleStop = React.useCallback(() => {
        var _a, _b;
        (_a = recorderRef.current) === null || _a === void 0 ? void 0 : _a.stop();
        setIsRecording(false);
        setRecord((_b = recorderRef.current) === null || _b === void 0 ? void 0 : _b.getRecord());
    }, []);
    const handleSave = React.useCallback(() => {
        if (record) {
            onSave(record);
        }
    }, [onSave, record]);
    useEffect(() => {
        var _a;
        (_a = recorderRef.current) === null || _a === void 0 ? void 0 : _a.stop();
        recorderRef.current = recorder;
    }, [recorder]);
    return (React.createElement("div", { className: "recordPanel" },
        React.createElement("button", { onClick: handleStart, type: "button", disabled: isRecording, className: "recordButton" }, "start"),
        React.createElement("button", { onClick: handleStop, type: "button", disabled: !isRecording, className: "recordButton" }, "stop"),
        React.createElement("button", { onClick: handleSave, type: "button", disabled: record == null, className: "recordButton" }, "save")));
};
export const renderAssistantRecordPanel = (recorder, saver) => {
    const div = document.createElement('div');
    document.body.appendChild(div);
    render(React.createElement(AssistantRecordPanel, { recorder: recorder, onSave: saver.save }), div);
};
