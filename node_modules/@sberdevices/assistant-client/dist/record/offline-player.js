const CURRENT_VERSION = '0.1.0';
export const createRecordOfflinePlayer = (record, context = window) => {
    let currentRecord = record;
    let entryCursor = 0;
    const playMessage = (message) => {
        var _a;
        for (const item of message.items) {
            if (item.command) {
                ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onData) && context.AssistantClient.onData(item.command);
            }
        }
    };
    const playNext = () => {
        if (!currentRecord || entryCursor + 1 >= currentRecord.entries.length) {
            return false;
        }
        let entry = currentRecord.entries[entryCursor++];
        while ((entry.type !== 'incoming' || entry.message == null) && entryCursor < currentRecord.entries.length) {
            entry = currentRecord.entries[entryCursor++];
        }
        if (entry.type === 'incoming') {
            entry.message && playMessage(entry.message.data);
        }
        return currentRecord.entries.some((e, i) => { var _a; return i > entryCursor && e.type === 'incoming' && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.data) != null; });
    };
    const play = () => {
        var _a;
        ((_a = context.AssistantClient) === null || _a === void 0 ? void 0 : _a.onStart) && context.AssistantClient.onStart();
        if (!currentRecord) {
            return;
        }
        let end = false;
        while (!end) {
            end = !playNext();
        }
    };
    const setRecord = (rec) => {
        if (rec.version !== CURRENT_VERSION) {
            throw new Error('Unsupported log version');
        }
        currentRecord = rec;
        entryCursor = 0;
    };
    return {
        continue: playNext,
        play,
        setRecord,
    };
};
