const CURRENT_VERSION = '0.1.0';
const getDefaultLog = () => ({ entries: [], version: CURRENT_VERSION });
export const createLogCallbackRecorder = (subscribe, defaultActive = true) => {
    let isActive = defaultActive;
    let currentLog = getDefaultLog();
    subscribe((entry) => {
        var _a, _b;
        if (isActive === false) {
            return;
        }
        switch (entry.type) {
            case 'incoming':
                if ((_a = entry.message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {
                    currentLog.entries.push({
                        type: entry.type,
                        message: {
                            data: JSON.parse(entry.message.systemMessage.data),
                            name: entry.message.messageName,
                        },
                    });
                }
                if (entry.message.text) {
                    currentLog.entries.push({ type: entry.type, text: entry.message.text });
                }
                break;
            case 'outcoming':
                if ((_b = entry.message.systemMessage) === null || _b === void 0 ? void 0 : _b.data) {
                    currentLog.entries.push({
                        type: entry.type,
                        message: {
                            data: JSON.parse(entry.message.systemMessage.data),
                            name: entry.message.messageName,
                        },
                    });
                }
                if (entry.message.text) {
                    currentLog.entries.push({ type: entry.type, text: entry.message.text });
                }
                break;
            default:
                currentLog.parameters = entry.parameters;
                break;
        }
    });
    const getRecord = () => currentLog;
    const start = () => {
        currentLog = getDefaultLog();
        isActive = true;
    };
    const stop = () => {
        isActive = false;
    };
    return {
        getRecord,
        start,
        stop,
    };
};
