import { NativePanelParams } from './NativePanel/NativePanel';
import { SystemMessageDataType, ClientLogger, VoicePlayerSettings } from './typings';
import { ISettings } from './proto';
export declare const legacyDevice: {
    clientType: string;
    channel: string;
    channelVersion: string;
    platformName: string;
    platformVersion: string;
};
export declare const settings: {
    dubbing: number;
    echo: number;
};
export declare const initializeAssistantSDK: ({ initPhrase, url, userChannel, surface, userId, token, surfaceVersion, deviceId, locale, nativePanel, sdkVersion, enableRecord, recordParams, settings: settingsOverride, voiceSettings, }: {
    initPhrase: string;
    url: string;
    userChannel: string;
    surface: string;
    userId?: string | undefined;
    token?: string | undefined;
    surfaceVersion?: string | undefined;
    deviceId?: string | undefined;
    locale?: string | undefined;
    nativePanel?: NativePanelParams | null | undefined;
    sdkVersion?: string | undefined;
    enableRecord?: boolean | undefined;
    recordParams?: {
        defaultActive?: boolean | undefined;
        logger?: ClientLogger | undefined;
    } | undefined;
    settings?: ISettings | undefined;
    voiceSettings?: VoicePlayerSettings | undefined;
}) => {
    sendText: (text: string, params?: {}) => Promise<SystemMessageDataType>;
    createVoiceStream: () => {
        write: (data: ArrayBuffer, last?: boolean) => void;
        answerToUser: Promise<SystemMessageDataType>;
        on: <K extends "stt">(event: K, cb: {
            stt: (text: string, last: boolean) => void;
        }[K]) => () => void;
    };
    createAudioRecorder: (stream: MediaStream) => {
        readonly state: "inactive" | "recording";
        start: () => void;
        stop: () => void;
        on: <K_1 extends "data" | "stop">(event: K_1, cb: {
            data: (buffer: ArrayBuffer, last: boolean) => void;
            stop: () => void;
        }[K_1]) => () => void;
        sampleRate: number;
    };
    on: <K_2 extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K_2, cb: import("./typings").EventsType[K_2]) => () => void;
    destroy: () => void;
};
//# sourceMappingURL=dev.d.ts.map