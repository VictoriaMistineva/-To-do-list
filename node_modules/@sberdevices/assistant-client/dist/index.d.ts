import { AssistantAppState, AssistantCharacterCommand, AssistantNavigationCommand, AssistantServerAction, AssistantSmartAppCommand, ClientLogger, Settings, VoicePlayerSettings } from './typings';
import { NativePanelParams } from './NativePanel/NativePanel';
export interface AssistantEvents {
    start: () => void;
    data: (command: AssistantCharacterCommand | AssistantNavigationCommand | AssistantSmartAppCommand) => void;
}
export declare const createAssistant: ({ getState, getRecoveryState, }: {
    getState: () => AssistantAppState;
    getRecoveryState?: (() => any) | undefined;
}) => {
    close: () => void | undefined;
    getInitialData: () => any[];
    getRecoveryState: () => any;
    on: <K extends "data" | "start">(event: K, cb: AssistantEvents[K]) => () => void;
    sendData: ({ action, name, requestId, }: {
        action: AssistantServerAction;
        name?: string | undefined;
        requestId?: string | undefined;
    }) => void;
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => any) | undefined) => void;
    setSuggest: (suggest: string) => void | undefined;
};
export declare const createAssistantDev: ({ getState, getRecoveryState, initPhrase, nativePanel, url, userId, token, userChannel, surface, surfaceVersion, sdkVersion, enableRecord, recordParams, settings, voiceSettings, }: {
    getState: () => AssistantAppState;
    getRecoveryState?: (() => Record<string, any> | undefined) | undefined;
    url: string;
    userChannel: string;
    surface: string;
    initPhrase: string;
    nativePanel?: NativePanelParams | null | undefined;
    userId?: string | undefined;
    token?: string | undefined;
    surfaceVersion?: string | undefined;
    sdkVersion?: string | undefined;
    enableRecord?: boolean | undefined;
    recordParams?: {
        defaultActive?: boolean | undefined;
        logger?: ClientLogger | undefined;
    } | undefined;
    settings?: Settings | undefined;
    voiceSettings?: VoicePlayerSettings | undefined;
}) => {
    close: () => void | undefined;
    getInitialData: () => any[];
    getRecoveryState: () => any;
    on: <K extends "data" | "start">(event: K, cb: AssistantEvents[K]) => () => void;
    sendData: ({ action, name, requestId, }: {
        action: AssistantServerAction;
        name?: string | undefined;
        requestId?: string | undefined;
    }) => void;
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => any) | undefined) => void;
    setSuggest: (suggest: string) => void | undefined;
};
export declare const createSmartappDebugger: ({ token, initPhrase, getState, getRecoveryState, }: {
    token: string;
    initPhrase: string;
    getState: () => AssistantAppState;
    getRecoveryState?: (() => Record<string, any> | undefined) | undefined;
}) => {
    close: () => void | undefined;
    getInitialData: () => any[];
    getRecoveryState: () => any;
    on: <K extends "data" | "start">(event: K, cb: AssistantEvents[K]) => () => void;
    sendData: ({ action, name, requestId, }: {
        action: AssistantServerAction;
        name?: string | undefined;
        requestId?: string | undefined;
    }) => void;
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => any) | undefined) => void;
    setSuggest: (suggest: string) => void | undefined;
};
export { createRecordOfflinePlayer as createRecordPlayer } from './record/offline-player';
export { NativePanelParams } from './NativePanel/NativePanel';
export * from './typings';
export * from './dev';
export { createClient } from './client';
export { createAudioRecorder } from './createAudioRecorder';
export { initializeDebugging } from './debug';
//# sourceMappingURL=index.d.ts.map